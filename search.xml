<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>欢迎来到大涛子峡谷</title>
      <link href="/2028/04/06/hello-world/"/>
      <url>/2028/04/06/hello-world/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前头：<br>我想每个人都想拥有属于自己的个人网站，尤其是我这类喜欢新鲜的人儿，哈哈…<br>但是，想到各种环境、各种配置、各种脸都不认识的专有术语…想想都头疼…<br>之前有想过使用WordPress，并且在本地也能看到效果，但是根据项目开发使用的情况来看，并不是很喜欢呐<br>终于过了好久好久…<br><a id="more"></a></p></blockquote><h4 id="时间在流逝…"><a href="#时间在流逝…" class="headerlink" title="时间在流逝…"></a>时间在流逝…</h4><blockquote><p>等到了一位使用HEXO搭建的博客的“雷”，起初搭好的同时，他就给我来了简洁明了的介绍<br>就在那时，一颗小小的种子已经深埋心中，等待开花、结果的那一天<br>大雷子的个人博客：<a href="https://isliulei.com/" target="_blank" rel="noopener">刘雷的博客</a>（ps：我不会告诉你，这位小伙伴在阿里巴巴搞蚂蚁金服，呼呼~）<br>当然，主题的选择，我也是纠结了好久，咨询过设计师<a href="https://zguii.com/" target="_blank" rel="noopener">ZGui可能去喂猫了</a>，再加上自己瞎折腾，目前可能是你看到的这款主题，过段时间，估计又会变了，哈哈哈哈…</p></blockquote><blockquote><p>特别感谢提供主题的各位大大，详尽的注释以及美丽大方的布局，着实让人着迷！</p></blockquote><blockquote><p>致谢！帮助过我的这些可爱的人儿，你们是最棒的！</p></blockquote><blockquote><p>Smile~</p></blockquote><blockquote><p>欢迎底部留下你的足迹 👣 👣 👣 👣 👣 👣…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 置顶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 置顶 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从零制作edm邮件，需要了解的一些规则</title>
      <link href="/2018/09/19/edm-01/"/>
      <url>/2018/09/19/edm-01/</url>
      
        <content type="html"><![CDATA[<p>因为电子邮件客户端预览窗口通常只是一小部分屏幕宽度，你最好上你的电子邮件的宽度设计在大约600px。没有人喜欢水平滚动条<br><a id="more"></a></p><h3 id="一、初见"><a href="#一、初见" class="headerlink" title="一、初见"></a>一、初见</h3><h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><ul><li><code>&lt;table&gt;</code> 标签定义 HTML 表格</li><li>简单的 HTML 表格由 <code>table</code> 元素以及一个或多个 <code>tr</code>、<code>th</code> 或 <code>td</code> 元素组成</li><li><code>tr(table row)</code> 元素定义表格行，<code>th(table head)</code> 元素定义表头，<code>td(table data)</code> 元素定义表格单元</li><li>更复杂的 HTML 表格也可能包括 <code>caption</code>、<code>col</code>、<code>colgroup</code>、<code>thead</code>、<code>tfoot</code> 以及 <code>tbody</code> 元素</li><li><a href="http://www.w3school.com.cn/tags/tag_table.asp" target="_blank" rel="noopener">HTML table 标签</a></li></ul><h4 id="table属性"><a href="#table属性" class="headerlink" title="table属性"></a>table属性</h4><ul><li><code>border</code> — 规定表格边框的宽度</li><li><code>align</code> — 规定表格相对周围元素的对齐方式 <code>(left,center,right)</code></li><li><code>valign</code> — 垂直，默认是<code>valign=&quot;middle&quot;</code>，但是会修改为<code>valign=&quot;top&quot;</code></li><li><code>cellspacing</code> — 规定单元格之间的空间</li><li><code>cellpadding</code> — 规定单元边沿与其内容之间的空白</li><li><code>width</code> — 规定表格的宽度</li><li><code>height</code> — 规定表格的高度</li><li><code>background</code> — 背景图像</li><li><code>bgcolor</code> — 背景颜色</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">bgcolor</span>=<span class="string">"#cccccc"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span> <span class="attr">cellpadding</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><ul><li><code>width、height</code></li><li><code>font-family</code></li><li><code>font-size</code></li><li><code>font-weight</code></li><li><code>color</code></li><li><code>line-height</code></li><li><code>border</code></li><li><code>background-color</code></li><li><code>background-image</code></li><li><code>vertical-align</code></li></ul><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><h5 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h5><ul><li><code>&lt;a href=&quot;http://www.eefocus.com&quot; target=&quot;_blank&quot;&gt;</code></li><li><code>&lt;img src=&quot;http://baidu.com/hao123.png&quot; alt=&quot;hao123图片&quot;&gt;</code></li><li><code>&lt;span&gt;我也可以是一段话，只是没法自主设置宽度而已&lt;/span&gt;</code></li></ul><h5 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h5><ul><li><code>&lt;p&gt;我是一段话...&lt;/p&gt;</code></li></ul><h3 id="二、了解"><a href="#二、了解" class="headerlink" title="二、了解"></a>二、了解</h3><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><h5 id="Area-1"><a href="#Area-1" class="headerlink" title="Area-1"></a>Area-1</h5><ul><li>HTML 编码格式：<code>utf-8</code></li><li>页面尽量保持宽（600px~800px）、高（1024px），整体邮件不要太大，比如15k（各个邮箱不同）左右，不然很容易走垃圾邮箱</li><li>样式使用行间样式，如：<code>&lt;td style=&quot;font-family:Arial, Helvetica, sans-serif;font-size:12px;color:#000000;&quot; &gt;文字&lt;/td&gt;</code>其他的方式会被无视</li></ul><h5 id="Area-2"><a href="#Area-2" class="headerlink" title="Area-2"></a>Area-2</h5><ul><li><code>font-family</code> 属性不能为空</li><li>使用<code>&lt;table&gt;</code>布局，居中显示使用<code>align=&quot;center</code></li><li>不使用 table 以外的 <code>body</code>、<code>meta</code>和<code>html</code>之类的标签，部分邮箱系统会把这些过滤掉</li><li>不使用 <code>flash、java、javascript、frames、iframe、activeX</code> 以及 <code>dhtml</code></li><li>不要出现<code>onmouseover</code>、<code>onmouseout</code>，即使设定了，也会被过滤掉</li></ul><h5 id="Area-3"><a href="#Area-3" class="headerlink" title="Area-3"></a>Area-3</h5><ul><li>区域与区域之间的上下、左右之间的空白间隙，使用标准的<code>&lt;td width=15&gt;&amp;nbsp;&lt;/td&gt;</code>或<code>&lt;td height=&quot;15&quot;&gt;&amp;nbsp;&lt;/td&gt;</code>，不要使用<code>padding=&quot;15px&quot;</code> — 防止各个邮箱的解析不同</li></ul><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><ul><li>图片的每个属性都要定义完整，如：<code>&lt;img src=&quot;http://www.eefocus.com/logo.png&quot; style=&quot;vertical-align:top;display:block;&quot; width=&quot;210&quot; height=&quot;100&quot;  alt=&quot;logo&quot;/&gt;</code></li><li>定义<code>style=&quot;vertical-align:top;&quot;</code> — 防止图片之间会有缝隙、变形等显示异常的情况</li><li>定义<code>display:block</code> — 解决Outlook电子邮件客户中图片底部增加空白间距的问题</li><li>限制每张图片的大小<code>width=&quot;200 height=&quot;200&quot;</code>或者<code>style=&quot;width:200px;height:200px;&quot;</code></li><li>添加每张图片alt属性，如：<code>alt=&quot;我是干啥的&quot;</code> — 防止图片无法加载，也可以知晓这是做什么的</li><li>图片格式使用<code>jpg、png</code>，尽量不要使用<code>gif</code></li><li>地址使用绝对路径（以<code>http/https</code>开头的）</li><li>尽量不使用背景图片<code>background-image</code>（Outlook不显示，但是可以显示背景色：<code>bgColor=&quot;f3f3f3&quot;</code>），直接使用图片<code>&lt;img src=&quot;&quot;&gt;</code></li><li>为了保持各个邮箱的一致性，尽量使用图片，大图可拆分成几张小图拼接，每张图片不要太大（15K以内）</li></ul><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><ul><li>地址绝对路径：<code>&lt;a href=&quot;http://www.eefocus.com&quot;&gt;Logo Plus&lt;/a&gt;</code></li><li>地址不可过长（超过255个字符），尽量简短</li><li>数量尽量不超过10个</li><li>地址不要使用特殊符号，避免解析错误</li><li>文字中出现链接地址，被屏蔽的风险比较高，一般是文字+链接、图片+链接</li><li>不要使用地图功能链接，很容易被划分为垃圾邮箱</li><li>为避免用户收到的邮件图片无法浏览，请制作一份和邮件内容一样的web 页面，然后在邮件顶部写一句话：“如果您无法查看邮件内容，请点击这里”， 链接到放有同样内容的web页面</li></ul><h4 id="Outlook邮箱规则"><a href="#Outlook邮箱规则" class="headerlink" title="Outlook邮箱规则"></a>Outlook邮箱规则</h4><ul><li>内敛元素的<code>padding</code>无效、<code>vertical-align</code>不能被识别，可定义在<code>td</code></li><li>别想着继承的事儿，某一块的样式都单独设置，比如链接样式，文字样式等</li><li><code>p</code>标签的<code>width</code>不起作用，可定义在<code>td</code></li><li>当设置 <code>&lt;img align=&quot;left&quot; /&gt;</code> 或 <code>&lt;img align=&quot;right&quot; /&gt;</code>时，图片会脱离文档流，在其父元素设置了 <code>margin</code> 或 <code>padding</code> 的话，都无法使其下移，左移或右移</li></ul><h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><ul><li>避免使用<code>margin padding</code>等属性，定义宽高的属性放在<code>td</code>，定义样式放在<code>p</code>或者<code>span</code>等标签内</li><li>一般而言，指定表格单元格宽度要比指定表格自身宽度要好 </li><li>使用bgcolor来替找style=”background:”,在电子邮件客户端中HTML属性要比CSS样式更好，但是优先等级依旧是：css样式&gt;html属性</li></ul><h3 id="三、悟道"><a href="#三、悟道" class="headerlink" title="三、悟道"></a>三、悟道</h3><h4 id="邮件设计"><a href="#邮件设计" class="headerlink" title="邮件设计"></a>邮件设计</h4><ul><li>电子邮件的设计过程是非常纠结的，为了美还得考虑制作过程的煎熬<h5 id="保持简单"><a href="#保持简单" class="headerlink" title="保持简单"></a>保持简单</h5></li><li>当设计一个HTML电子邮件时，请记住保持简单，编码的时候考虑坚持两列布局，这样能为您省去很多麻烦的事情<h5 id="减少图像的使用甚至避免使用"><a href="#减少图像的使用甚至避免使用" class="headerlink" title="减少图像的使用甚至避免使用"></a>减少图像的使用甚至避免使用</h5></li><li>记住你的设计不能太花哨，因为Outlook不支持背景图像<h5 id="窄屏最好"><a href="#窄屏最好" class="headerlink" title="窄屏最好"></a>窄屏最好</h5></li><li>因为电子邮件客户端预览窗口通常只是一小部分屏幕宽度，你最好上你的电子邮件的宽度设计在大约600px。没有人喜欢水平滚动条<h5 id="保持一致"><a href="#保持一致" class="headerlink" title="保持一致"></a>保持一致</h5></li><li>记住，我们使用固定的元素属性cellpadding和cellspacing设置单元格的边距和单元格的间距。这样保持元素之间的间距一致性是正确的与谨慎的<blockquote><p>节选自：<a href="http://www.w3cplus.com/css/getting-started-with-html-emails.html" target="_blank" rel="noopener">开始制作HTML Email </a>之邮件设计</p></blockquote><h4 id="邮件制作"><a href="#邮件制作" class="headerlink" title="邮件制作"></a>邮件制作</h4></li><li>电子邮件的制作过程是非常煎熬的，一不小心就乱了、乱了。<h4 id="邮件测试"><a href="#邮件测试" class="headerlink" title="邮件测试"></a>邮件测试</h4></li><li>电子邮件的测试过程是非常痛苦的，也是最让人奔溃的，因为你很有可能拆了西墙补东墙</li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><h5 id="我们看一下测试邮件：效果图"><a href="#我们看一下测试邮件：效果图" class="headerlink" title="我们看一下测试邮件：效果图"></a>我们看一下测试邮件：<a href="https://www.qdfuns.com/article.php?mod=view&amp;id=333432fb9305a8331f6cc39998a2626e&amp;uid=32286" target="_blank" rel="noopener">效果图</a></h5>]]></content>
      
      
      <categories>
          
          <category> Email </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EDM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac 终端简易学习总结</title>
      <link href="/2018/08/13/macos-bash/"/>
      <url>/2018/08/13/macos-bash/</url>
      
        <content type="html"><![CDATA[<h4 id="一、目录基本操作"><a href="#一、目录基本操作" class="headerlink" title="一、目录基本操作"></a>一、目录基本操作</h4><h5 id="1-pwd-—-获取当前所在路径"><a href="#1-pwd-—-获取当前所在路径" class="headerlink" title="1. pwd — 获取当前所在路径"></a>1. <code>pwd</code> — 获取当前所在路径</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yangtaodeMacBook-Pro:<span class="built_in">test</span> yangtao$ <span class="built_in">pwd</span></span><br><span class="line">/Users/yangtao/Desktop/文件创建/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="2-ls-—-列出当前目录下的所有文件"><a href="#2-ls-—-列出当前目录下的所有文件" class="headerlink" title="2. ls — 列出当前目录下的所有文件"></a>2. <code>ls</code> — 列出当前目录下的所有文件</h5><ul><li><code>ls -l</code> — 用长格式列出来</li><li><code>ls -a</code> — 列出文件（包括隐藏的文件）</li><li><code>ls -al</code> — 以长格式列出文件（包括隐藏的文件）</li></ul><h5 id="3-cd-—-目录间的切换"><a href="#3-cd-—-目录间的切换" class="headerlink" title="3. cd — 目录间的切换"></a>3. <code>cd</code> — 目录间的切换</h5><p>可以使用<code>tab</code>键补全目录名称，将文件拖入终端，可以显示该文件的目录</p><ul><li><code>cd</code> — (无参数)返回home目录</li><li><code>cd ~</code> — 返回home目录，可以使用<code>cd ~/Music</code>快速到达该目录，使用<code>cd ~Guest/</code>进入Guest用户的home目录</li><li><code>cd -</code> — 返回上一次操作的目录，可与当前目录进行切换</li><li><code>cd ..</code> — 返回上一层目录，<code>..</code>表示上一层目录，而<code>.</code>表示当前目录，如<code>./Music</code>，表示当前目录下的Music文件</li></ul><h5 id="4-mkdir-文件名-—-（make-dir）新建文件夹"><a href="#4-mkdir-文件名-—-（make-dir）新建文件夹" class="headerlink" title="4. mkdir 文件名 — （make dir）新建文件夹"></a>4. <code>mkdir 文件名</code> — （make dir）新建文件夹</h5><h5 id="5-rmdir-文件名-—-（remove-dir）删除文件夹"><a href="#5-rmdir-文件名-—-（remove-dir）删除文件夹" class="headerlink" title="5. rmdir 文件名 — （remove dir）删除文件夹"></a>5. <code>rmdir 文件名</code> — （remove dir）删除文件夹</h5><p>如果文件夹内不为空，则无法用rmdir删除文件夹</p><h5 id="6-rm-文件名-—-（remove-dir）删除文件"><a href="#6-rm-文件名-—-（remove-dir）删除文件" class="headerlink" title="6. rm 文件名 — （remove dir）删除文件"></a>6. <code>rm 文件名</code> — （remove dir）删除文件</h5><p>注意：用<code>rm</code>删除掉的文件是无法从回收站中找回的！而且不能使用rm来删除文件夹</p><h5 id="7-mv-原文件-目标目录-新文件名-—-移动"><a href="#7-mv-原文件-目标目录-新文件名-—-移动" class="headerlink" title="7. mv 原文件 目标目录/新文件名 — 移动"></a>7. <code>mv 原文件 目标目录/新文件名</code> — 移动</h5><p>把文件从一个地方移到另一个地方，但是当没有给出另外一个目录时，移动的现象就是为其更改了名字</p><h5 id="8-cp-带目录文件-目标目录-—-复制粘贴"><a href="#8-cp-带目录文件-目标目录-—-复制粘贴" class="headerlink" title="8. cp 带目录文件 目标目录 — 复制粘贴"></a>8. <code>cp 带目录文件 目标目录</code> — 复制粘贴</h5><h5 id="9-man-命令-—-查看使用手册"><a href="#9-man-命令-—-查看使用手册" class="headerlink" title="9. man 命令 — 查看使用手册"></a>9. <code>man 命令</code> — 查看使用手册</h5><h4 id="二、历史操作"><a href="#二、历史操作" class="headerlink" title="二、历史操作"></a>二、历史操作</h4><h5 id="1-向上（向下）箭头"><a href="#1-向上（向下）箭头" class="headerlink" title="1. 向上（向下）箭头"></a>1. <code>向上（向下）箭头</code></h5><p>查看上一个（下一个）命令，可以一直向前查看之前执行过的命令</p><h5 id="2-l-—-找出与你最近一次的l开头的命令，并执行"><a href="#2-l-—-找出与你最近一次的l开头的命令，并执行" class="headerlink" title="2. !l — 找出与你最近一次的l开头的命令，并执行"></a>2. <code>!l</code> — 找出与你最近一次的l开头的命令，并执行</h5><h5 id="3-history-—-查看之前执行过命令的历史记录"><a href="#3-history-—-查看之前执行过命令的历史记录" class="headerlink" title="3. history — 查看之前执行过命令的历史记录"></a>3. <code>history</code> — 查看之前执行过命令的历史记录</h5><h4 id="三、进程管理操作"><a href="#三、进程管理操作" class="headerlink" title="三、进程管理操作"></a>三、进程管理操作</h4><h5 id="1-ps-—-查看当前终端运行的程序"><a href="#1-ps-—-查看当前终端运行的程序" class="headerlink" title="1. ps — 查看当前终端运行的程序"></a>1. <code>ps</code> — 查看当前终端运行的程序</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yangtaodeMacBook-Pro:<span class="built_in">test</span> yangtao$ ps</span><br><span class="line">  PID TTY           TIME CMD</span><br><span class="line">19083 ttys000    0:00.40 -bash</span><br></pre></td></tr></table></figure><h5 id="2-ps-ax-—列出这台电脑正在运行的所有程序"><a href="#2-ps-ax-—列出这台电脑正在运行的所有程序" class="headerlink" title="2. ps ax —列出这台电脑正在运行的所有程序"></a>2. <code>ps ax</code> —列出这台电脑正在运行的所有程序</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">20008   ??  S      0:00.12 /System/Library/Frameworks/QuickLook.framework/Resources/quicklookd.app/Contents/MacOS/quicklookd</span><br><span class="line">19082 s000  Ss     0:00.02 login -pf yangtao</span><br><span class="line">19083 s000  S      0:00.40 -bash</span><br><span class="line">20079 s000  R+     0:00.00 ps ax</span><br><span class="line">yangtaodeMacBook-Pro:<span class="built_in">test</span> yangtao$</span><br></pre></td></tr></table></figure><h5 id="3-top-—-显示这台计算机上有哪些进程，显示内存、CPU、负载等"><a href="#3-top-—-显示这台计算机上有哪些进程，显示内存、CPU、负载等" class="headerlink" title="3. top — 显示这台计算机上有哪些进程，显示内存、CPU、负载等"></a>3. <code>top</code> — 显示这台计算机上有哪些进程，显示内存、CPU、负载等</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PID    COMMAND      %CPU TIME     <span class="comment">#TH   #WQ  #PORT MEM    PURG   CMPRS  PGRP  PPID  STATE    BOOSTS           %CPU_ME %CPU_OTHRS UID  FAULTS    COW</span></span><br><span class="line">20088  top          4.1  00:00.99 1/1   0    23    6724K  0B     0B     20088 19083 running  *0[1]            0.00000 0.00000    0    7185+     105</span><br><span class="line">20087  AGSService   0.0  00:00.03 2     1    36    1716K  0B     0B     20087 1     sleeping *0[1]            0.00000 0.00000    0    3076</span><br></pre></td></tr></table></figure><h5 id="4-kill-PID-—-结束指定进程ID的进程"><a href="#4-kill-PID-—-结束指定进程ID的进程" class="headerlink" title="4. kill [PID] — 结束指定进程ID的进程"></a>4. <code>kill [PID]</code> — 结束指定进程ID的进程</h5><p><strong>具体做法：</strong> 先使用top命令查看想要结束进程的PID，然后使用命令<code>kill [PID]</code></p><p><strong>Tips：</strong> 如果遇到无法杀掉的进程，输入命令<code>sudo kill -9 [PID]</code> (伪装超级管理员，强迫杀掉该进程)，接着输入自己用户的密码（前提是自己这个用户具有sudo的资格）</p><h4 id="四、万能的grep操作"><a href="#四、万能的grep操作" class="headerlink" title="四、万能的grep操作"></a>四、万能的grep操作</h4><h5 id="1-grep-800-log-txt-—-从log-txt中找出800位置的数据"><a href="#1-grep-800-log-txt-—-从log-txt中找出800位置的数据" class="headerlink" title="1. grep 800 log.txt — 从log.txt中找出800位置的数据"></a>1. <code>grep 800 log.txt</code> — 从log.txt中找出800位置的数据</h5><h5 id="2-grep-n-800-log-txt-—-从log-txt中找出800位置的数据-并在前面加上行号"><a href="#2-grep-n-800-log-txt-—-从log-txt中找出800位置的数据-并在前面加上行号" class="headerlink" title="2. grep -n 800 log.txt — 从log.txt中找出800位置的数据,并在前面加上行号"></a>2. <code>grep -n 800 log.txt</code> — 从log.txt中找出800位置的数据,并在前面加上行号</h5><h5 id="3-grep-n-Hello-是否加上行号-—-从当前目录下的所有文件中找出出现过Hello的文件"><a href="#3-grep-n-Hello-是否加上行号-—-从当前目录下的所有文件中找出出现过Hello的文件" class="headerlink" title="3. grep (-n) Hello * (是否加上行号) — 从当前目录下的所有文件中找出出现过Hello的文件"></a>3. <code>grep (-n) Hello * (是否加上行号)</code> — 从当前目录下的所有文件中找出出现过Hello的文件</h5><h5 id="4-ls-usr-bin-grep-ls-—-查看-usr-bin目录下面带ls的目录"><a href="#4-ls-usr-bin-grep-ls-—-查看-usr-bin目录下面带ls的目录" class="headerlink" title="4. ls /usr/bin | grep ls — 查看/usr/bin目录下面带ls的目录"></a>4. <code>ls /usr/bin | grep ls</code> — 查看/usr/bin目录下面带ls的目录</h5><h5 id="5-ls-usr-bin-grep-ls-wc-—-计算出单词的数量"><a href="#5-ls-usr-bin-grep-ls-wc-—-计算出单词的数量" class="headerlink" title="5. ls /usr/bin | grep ls | wc — 计算出单词的数量"></a>5. <code>ls /usr/bin | grep ls | wc</code> — 计算出单词的数量</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yangtaodeMacBook-Pro:<span class="built_in">test</span> yangtao$ ls /usr/bin | grep ls | wc</span><br><span class="line">      16      16     124</span><br><span class="line"><span class="comment"># 16行 16个单词 124个字符</span></span><br></pre></td></tr></table></figure><h4 id="五、环境变量操作"><a href="#五、环境变量操作" class="headerlink" title="五、环境变量操作"></a>五、环境变量操作</h4><h5 id="1-set-grep-PATH-—-查看环境变量"><a href="#1-set-grep-PATH-—-查看环境变量" class="headerlink" title="1. set | grep PATH — 查看环境变量"></a>1. <code>set | grep PATH</code> — 查看环境变量</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yangtaodeMacBook-Pro:~ yangtao$ <span class="built_in">set</span> | grep PATH</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/bin:/usr/bin:/bin:/usr/sbin:/sbin</span><br></pre></td></tr></table></figure><h5 id="2-set-grep-PATH-—-将其他文件夹路径（本机用户下面的bin目录）添加到PATH"><a href="#2-set-grep-PATH-—-将其他文件夹路径（本机用户下面的bin目录）添加到PATH" class="headerlink" title="2. set | grep PATH — 将其他文件夹路径（本机用户下面的bin目录）添加到PATH"></a>2. <code>set | grep PATH</code> — 将其他文件夹路径（本机用户下面的bin目录）添加到PATH</h5><p>这样做只是一次性的，也就是说在当前终端，是可以直接生效的，但是当你关闭后，重新打开终端，这个操作是不被保存的。</p><p>在<code>/etc/profile</code>这个文件是任何人打开终端都会执行的，是系统级的profile。</p><p>如果我们想自定义自己的profile，可以在自己的家目录下新建文件命名为：<code>.profile</code>，这个文件会在你打开终端时自动执行。</p><p>我们将刚刚的命令2输入其中，然后保存退出（vim下使用<code>:wq</code>）<br>这样的话，在我们刚刚已经登录的终端里面它还是不起作用的，假如你希望它可以立刻生效，你可以使用<code>source</code>命令。</p><h5 id="3-source-—-例如：source-profile"><a href="#3-source-—-例如：source-profile" class="headerlink" title="3. source — 例如：source .profile"></a>3. <code>source</code> — 例如：<code>source .profile</code></h5><p>使Shell读入指定的Shell程序文件并依次执行文件中的所有语句，通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录</p><h4 id="六、网络配置操作"><a href="#六、网络配置操作" class="headerlink" title="六、网络配置操作"></a>六、网络配置操作</h4><h5 id="1-ifconfig-—-列出本机所有的网络设备以及其上面的配置，主要指的是ip地址和mac地址"><a href="#1-ifconfig-—-列出本机所有的网络设备以及其上面的配置，主要指的是ip地址和mac地址" class="headerlink" title="1. ifconfig — 列出本机所有的网络设备以及其上面的配置，主要指的是ip地址和mac地址"></a>1. <code>ifconfig</code> — 列出本机所有的网络设备以及其上面的配置，主要指的是ip地址和mac地址</h5><p>我的连的是en5，它的状态时active（最后一行），原文是en4</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">en5: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">ether ac:de:48:00:11:22 </span><br><span class="line">inet6 fe80::aede:48ff:fe00:1122%en5 prefixlen 64 scopeid 0x7 </span><br><span class="line">nd6 options=201&lt;PERFORMNUD,DAD&gt;</span><br><span class="line">media: autoselect</span><br><span class="line">status: active</span><br></pre></td></tr></table></figure><p><em>其他用法：</em></p><ul><li><p><code>ifconfig en4 down/up</code> — 关闭（或打开）某个网络接口，比如en4,一般需要管理员权限，所以需要在前面加sudo命令</p></li><li><p><code>sudo ifconfig en4 add 10.10.10.12 netmask 255.255.255.0</code> — 给en4加入别的网段</p></li><li><code>sudo ifconfig en4 delete 10.10.10.12</code> — 给en4删除指定网段</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时修改MAC地址</span></span><br><span class="line">ifconfig en0 down // 关闭网卡设备（这里假设是en0）</span><br><span class="line">ifconfig en0 hw ether [MAC地址] // 修改MAC地址</span><br><span class="line">ifconfig en0 up // 重启网卡</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时修改内网ip地址</span></span><br><span class="line">ifconfig en0 down</span><br><span class="line">ifconfig en0 192.168.169.245 netmask 255.255.255.0</span><br></pre></td></tr></table></figure><h5 id="2-ping-—-检测网络是否是连通状态"><a href="#2-ping-—-检测网络是否是连通状态" class="headerlink" title="2. ping — 检测网络是否是连通状态"></a>2. <code>ping</code> — 检测网络是否是连通状态</h5><h5 id="3-netstat-—-显示各种网络相关信息"><a href="#3-netstat-—-显示各种网络相关信息" class="headerlink" title="3. netstat — 显示各种网络相关信息"></a>3. <code>netstat</code> — 显示各种网络相关信息</h5><p><em>其他用法：</em></p><ul><li><p><code>netstat -l</code> — 列出本机进行监听的端口</p></li><li><p><code>netstat -lt</code> — 只列出tcp的连接，同理在l后面跟上u的话，将会列出各种udp的监听端口</p></li><li><p><code>netstat -s</code> — 查看统计数据</p></li><li><p><code>netstat -p</code> — 列出进程信息，你可以了解是哪一个程序在哪一个端口上做些什么事情</p></li><li><p><code>netstat -pc</code> — 会显示出实时更新的进程信息</p></li><li><p><code>netstat -r</code> — 查看路由表</p></li><li><code>netstat -i</code> — 查看接口信息</li></ul><blockquote><p>详情参考<br><a href="https://www.jianshu.com/p/0e43268f01db" target="_blank" rel="noopener">Mac终端学习系列</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git之本地拉取Github代码、修改远程URL</title>
      <link href="/2018/08/09/git-revert/"/>
      <url>/2018/08/09/git-revert/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1533488265900&amp;di=91f78407d4ffda11e55202ceafda93c4&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg3.imgtn.bdimg.com%2Fit%2Fu%3D2417199588%2C1851489715%26fm%3D214%26gp%3D0.jpg" alt=""></p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Workspace：工作区</span><br><span class="line">Index / Stage：暂存区</span><br><span class="line">Repository：仓库区（或本地仓库）</span><br><span class="line">Remote：远程仓库</span><br></pre></td></tr></table></figure><h4 id="详细介绍如何使用git"><a href="#详细介绍如何使用git" class="headerlink" title="详细介绍如何使用git"></a>详细介绍如何使用git</h4><ul><li>博客推荐：<ul><li><a href="https://juejin.im/entry/5b66e89951882563522b78ae/" target="_blank" rel="noopener">如何使用Git上传项目代码到github</a> </li><li><a href="https://juejin.im/entry/5b66ec5c51882536e875be76/" target="_blank" rel="noopener">Git远程操作详解—阮一峰</a></li><li><a href="https://juejin.im/entry/5667d39d00b0ee7fa8c9f99f" target="_blank" rel="noopener">常用 Git 命令清单—阮一峰</a></li></ul></li></ul><h4 id="本地拉取仓库代码-—-clone"><a href="#本地拉取仓库代码-—-clone" class="headerlink" title="本地拉取仓库代码 — clone"></a>本地拉取仓库代码 — clone</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yangtao2o/yangtao2o.github.io.git</span><br></pre></td></tr></table></figure><h4 id="修改远程URL-—-remote"><a href="#修改远程URL-—-remote" class="headerlink" title="修改远程URL — remote"></a>修改远程URL — remote</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git remote -v    <span class="comment"># 查看远程服务器地址和仓库名称</span></span><br><span class="line">git remote show origin   <span class="comment"># 查看远程服务器仓库状态</span></span><br><span class="line">git remote add origin https://github.com/yangtao2o/yangtao2o.github.io.git  <span class="comment"># 添加远程仓库地址</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://github.com/..io.git   <span class="comment"># 设置远程仓库地址(用于修改远程仓库地址)</span></span><br><span class="line">git remote rename &lt;old name&gt; &lt;new name&gt;  <span class="comment"># 修改远程主机的名称</span></span><br><span class="line">git remote rm &lt;repository&gt;   <span class="comment"># 删除远程仓库</span></span><br></pre></td></tr></table></figure><h4 id="代码回滚"><a href="#代码回滚" class="headerlink" title="代码回滚"></a>代码回滚</h4><ul><li><p>如果是在workspace，未git push，使用以下命令会清空工作目录中所有未提交的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD  <span class="comment"># 全部撤销</span></span><br><span class="line">git checkout -- hello.html  <span class="comment"># 只恢复hello.html文件</span></span><br></pre></td></tr></table></figure></li><li><p>如果已提交，使用<code>git revert</code>，使用一次新的commit，来回滚要你要回滚的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure></li><li><p>参考：<a href="https://juejin.im/entry/5b6707f25188251ac22b6f0f/" target="_blank" rel="noopener">Git的撤消操作 - 重置, 签出 和 撤消</a></p><h4 id="使用过程中，遇到的一些问题"><a href="#使用过程中，遇到的一些问题" class="headerlink" title="使用过程中，遇到的一些问题"></a>使用过程中，遇到的一些问题</h4></li><li><p><code>git pull</code>时<code>fatal:refusing to merge unrelated histories</code></p><ul><li><code>git pull --allow-unrelated-histories</code></li></ul></li><li><p><code>origin</code>一般是我们自己创建的代码库，所以可以做任何的<code>git pull or git push</code>，但是如果我们引入了他人的代码库，就成了<code>upstream</code>，只能<code>git fetch</code>，通过<code>fork</code>到自己的仓库里，如同<code>origin</code></p><ul><li>关于<code>fork、origin、upstream、clone</code>之间的关系博文推荐： <a href="https://juejin.im/entry/5b66f8d5f265da0f574e0884/" target="_blank" rel="noopener">GitHub关于fork、origin、upstream、clone的藕断丝连</a></li></ul></li><li><p><a href="https://juejin.im/entry/5b66ea75e51d45195312a173/" target="_blank" rel="noopener">git submodule使用以及注意事项</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>macOS安装homebrew报错 LibreSSL SSL_read SSL_ERROR_SYSCALL errno 54</title>
      <link href="/2018/08/05/macos-brew/"/>
      <url>/2018/08/05/macos-brew/</url>
      
        <content type="html"><![CDATA[<blockquote><p>LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54</p></blockquote><a id="more"></a><h4 id="安装"><a href="#安装" class="headerlink" title="# 安装"></a># 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">curl <span class="string">"https://nodejs.org/dist/latest/node-<span class="variable">$&#123;VERSION:-$(wget -qO- https://nodejs.org/dist/latest/ | sed -nE 's|.*&gt;node-(.*)\.pkg&lt;/a&gt;.*|\1|p')&#125;</span>.pkg"</span> &gt; <span class="string">"<span class="variable">$HOME</span>/Downloads/node-latest.pkg"</span> &amp;&amp; sudo installer -store -pkg <span class="string">"<span class="variable">$HOME</span>/Downloads/node-latest.pkg"</span> -target <span class="string">"/"</span></span><br></pre></td></tr></table></figure><h4 id="报错"><a href="#报错" class="headerlink" title="# 报错"></a># 报错</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">==&gt; Tapping homebrew/core</span><br><span class="line">Cloning into <span class="string">'/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core'</span>...</span><br><span class="line">fatal: unable to access <span class="string">'https://github.com/Homebrew/homebrew-core/'</span>: LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54</span><br><span class="line">Error: Failure <span class="keyword">while</span> executing; `git <span class="built_in">clone</span> https://github.com/Homebrew/homebrew-core /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core --depth=1` exited with 128.</span><br><span class="line">Error: Failure <span class="keyword">while</span> executing; `/usr/<span class="built_in">local</span>/bin/brew tap homebrew/core` exited with 1.</span><br></pre></td></tr></table></figure><h4 id="解决："><a href="#解决：" class="headerlink" title="# 解决："></a># 解决：</h4><ul><li>执行下面这句命令，更换为中科院的镜像：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> git://mirrors.ustc.edu.cn/homebrew-core.git/ /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core --depth=1</span><br></pre></td></tr></table></figure><ul><li>把homebrew-core的镜像地址也设为中科院的国内镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span> </span><br><span class="line"></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span> </span><br><span class="line"></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure><ul><li>更新</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>报错解决：<a href="https://blog.csdn.net/qq_35624642/article/details/79682979" target="_blank" rel="noopener">macOS High Sierra10.13.3安装homebrew报错LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54解决方法</a></li><li><a href="https://blog.csdn.net/qq_41234116/article/details/79366454" target="_blank" rel="noopener">Mac安装，简单实用，卸载homebrew详细教程</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> Homebrew </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>macOS下node版本管理下载新版本时中断返回Segmentation fault 11</title>
      <link href="/2018/08/05/macos-node/"/>
      <url>/2018/08/05/macos-node/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前记：安装node的时候安装了最新版本，但是我需要指定某一个版本，所以安装了n模块，来进行版本切换，但是途中发生了报错：Segmentation fault：11，导致npm命令无法使用，由于使用的macOS，大家都推荐HomeBrew，于是连滚带爬地从一个坑跳到另一个坑，好疼啊…</p></blockquote><a id="more"></a><h4 id="n模块"><a href="#n模块" class="headerlink" title="n模块"></a>n模块</h4><ul><li>首先 <strong>n模块不支持Windows！！！</strong></li><li>安装：<code>sudo npm install -g n</code></li><li>参考：<a href="https://blog.csdn.net/kiddd_fu/article/details/78655672" target="_blank" rel="noopener">node版本更新的简便方法——神奇的n模块</a></li><li>版本切换：<code>n</code>，然后上下切换，圆点在哪儿就是哪个，但是问题两个或者多个都是灰色，即没有圆点，怎么办？<ul><li>这时，切回去使用<code>node -v</code>就会报错：<code>Segmentation fault: 11</code> ，当然，npm 直接<code>npm: command not found</code></li></ul></li><li>解决：<code>sudo n 8.1.3</code></li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/8/4/165046762420dadb?w=1268&amp;h=478&amp;f=jpeg&amp;s=170090" alt=""></p><ul><li>参考：<a href="https://blog.csdn.net/Dcatfly/article/details/75201172" target="_blank" rel="noopener">n模块管理node版本遇到的问题</a></li><li>但是切换到8.11.3，问题依旧存在，所以删除：<code>sudo n rm 8.11.3</code></li><li>卸载npm：<code>sudo npm uninstall npm -g</code>，然后去node官网重新下载<code>8.11.3LTS</code>，安装成功，但是使用<code>n list</code>，并未查看到此版本</li><li>于是，重新再走一遍：<code>sudo n 8.11.3</code>，成功。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript算法初级练习</title>
      <link href="/2018/08/01/js%E7%AE%97%E6%B3%95/"/>
      <url>/2018/08/01/js%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="需要定义一个最小值和一个最大值之间的随机数"><a href="#需要定义一个最小值和一个最大值之间的随机数" class="headerlink" title="# 需要定义一个最小值和一个最大值之间的随机数"></a># 需要定义一个最小值和一个最大值之间的随机数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ourFunction</span>(<span class="params">ourMin, ourMax</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (ourMax - ourMin + <span class="number">1</span>)) + ourMin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ourFunction(<span class="number">1</span>, <span class="number">9</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="计算一个整数的阶乘"><a href="#计算一个整数的阶乘" class="headerlink" title="# 计算一个整数的阶乘"></a># 计算一个整数的阶乘</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorialize</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">if</span>(num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num *= factorialize(num - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorialize(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="来一段回文"><a href="#来一段回文" class="headerlink" title="# 来一段回文"></a># 来一段回文</h3><ul><li><a href="http://www.w3cplus.com/javascript/palindrome-check-in-javascript.html" target="_blank" rel="noopener">JavaScript算法练习： JavaScript中回文(Palindromes)处理</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> re = <span class="regexp">/[\W_]/g</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> lowRegStr = str.toLowerCase().replace(re, <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">var</span> reveRegStr = lowRegStr.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> lowRegStr == reveRegStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">palindrome(<span class="string">"eye"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> re = <span class="regexp">/[\W_]/g</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> lowRegStr = str.toLowerCase().replace(re, <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, l=lowRegStr.length; i&lt;l/<span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(lowRegStr[i] != lowRegStr[l - <span class="number">1</span> -i]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">palindrome(<span class="string">"eye"</span>);</span><br></pre></td></tr></table></figure><h3 id="在句子中找出最长的单词，并返回它的长度。"><a href="#在句子中找出最长的单词，并返回它的长度。" class="headerlink" title="# 在句子中找出最长的单词，并返回它的长度。"></a># 在句子中找出最长的单词，并返回它的长度。</h3><ul><li><a href="http://www.cnblogs.com/chenjinxinlove/p/5579043.html" target="_blank" rel="noopener">js 数组排序和算法排序</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLongestWord</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> strArr = str = str.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;strArr.length; i++) &#123;</span><br><span class="line">    newArr.push(strArr[i].length);</span><br><span class="line">  &#125;</span><br><span class="line">  newArr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> b - a;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> newArr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findLongestWord(<span class="string">"What if we try a super-long word such as otorhinolaryngology"</span>);</span><br></pre></td></tr></table></figure><h3 id="确保字符串的每个单词首字母都大写，其余部分小写。"><a href="#确保字符串的每个单词首字母都大写，其余部分小写。" class="headerlink" title="# 确保字符串的每个单词首字母都大写，其余部分小写。"></a># 确保字符串的每个单词首字母都大写，其余部分小写。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> strArr = str.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">var</span> newStrArr = [];</span><br><span class="line">  <span class="keyword">var</span> newStr = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;strArr.length; i++) &#123;</span><br><span class="line">    newStr = strArr[i][<span class="number">0</span>].toUpperCase();</span><br><span class="line">    newStr += strArr[i].substr(<span class="number">1</span>).toLowerCase();</span><br><span class="line">    newStrArr.push(newStr);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  newStrArr = newStrArr.join(<span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newStrArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">titleCase(<span class="string">"I'm a little tea pot"</span>);</span><br></pre></td></tr></table></figure><h3 id="找出多个数组中的最大数"><a href="#找出多个数组中的最大数" class="headerlink" title="# 找出多个数组中的最大数"></a># 找出多个数组中的最大数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">largestOfFour</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">var</span> num = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">    num = arr[i].sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> b - a;</span><br><span class="line">    &#125;);</span><br><span class="line">    newArr.push(num[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">largestOfFour([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>], [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>], [<span class="number">1000</span>, <span class="number">1001</span>, <span class="number">857</span>, <span class="number">1</span>]]);</span><br></pre></td></tr></table></figure><h3 id="判断一个字符串-str-是否以指定的字符串-target-结尾。"><a href="#判断一个字符串-str-是否以指定的字符串-target-结尾。" class="headerlink" title="# 判断一个字符串(str)是否以指定的字符串(target)结尾。"></a># 判断一个字符串(str)是否以指定的字符串(target)结尾。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">confirmEnding</span>(<span class="params">str, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = target.length;</span><br><span class="line">  <span class="keyword">if</span>(str.substr(-len) == target) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">confirmEnding(<span class="string">"He has to give me a new name"</span>, <span class="string">"name"</span>);</span><br><span class="line">confirmEnding(<span class="string">"Bastian"</span>, <span class="string">"n"</span>);</span><br></pre></td></tr></table></figure><h3 id="重复一个指定的字符串-num次，如果num是一个负数则返回一个空字符串。"><a href="#重复一个指定的字符串-num次，如果num是一个负数则返回一个空字符串。" class="headerlink" title="# 重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。"></a># 重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str, num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">var</span> newStr = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span>(num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    newStr = <span class="string">''</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;num; i++) &#123;</span><br><span class="line">      newArr.push(str);</span><br><span class="line">    &#125;</span><br><span class="line">    newStr = newArr.join(<span class="string">''</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repeat(<span class="string">"abc"</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><h3 id="如果字符串的长度比指定的参数num长…"><a href="#如果字符串的长度比指定的参数num长…" class="headerlink" title="# 如果字符串的长度比指定的参数num长…"></a># 如果字符串的长度比指定的参数num长…</h3><ul><li>如果字符串的长度比指定的参数num长，则把多余的部分用…来表示。切记，插入到字符串尾部的三个点号也会计入字符串的长度。但是，如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">str, num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newStr=<span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span>(num &gt;= str.length) &#123;</span><br><span class="line">    newStr = str.slice(<span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    newStr = str.slice(<span class="number">0</span>, num<span class="number">-3</span>) + <span class="string">'...'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    newStr = str.slice(<span class="number">0</span>, num) + <span class="string">'...'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">truncate(<span class="string">"A-tisket a-tasket A green and yellow basket"</span>, <span class="number">11</span>);</span><br></pre></td></tr></table></figure><h3 id="把一个数组arr按照指定的数组大小size分割成若干个数组块。"><a href="#把一个数组arr按照指定的数组大小size分割成若干个数组块。" class="headerlink" title="# 把一个数组arr按照指定的数组大小size分割成若干个数组块。"></a># 把一个数组arr按照指定的数组大小size分割成若干个数组块。</h3><ul><li><a href="https://segmentfault.com/q/1010000004921251" target="_blank" rel="noopener">js将一位数组分割成每三个一组</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">arr, size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i+=size) &#123;</span><br><span class="line">    newArr.push(arr.slice(i, i+size));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunk([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>], <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。"><a href="#返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。" class="headerlink" title="# 返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。"></a># 返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slasher</span>(<span class="params">arr, howMany</span>) </span>&#123;</span><br><span class="line">  arr.splice(<span class="number">0</span>, howMany);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slasher([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。"><a href="#如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。" class="headerlink" title="# 如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。"></a># 如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mutation</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str1 = arr[<span class="number">0</span>].toLowerCase();  </span><br><span class="line">  <span class="keyword">var</span> str2 = arr[<span class="number">1</span>].toLowerCase();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;str2.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(str1.indexOf(str2[i]) == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mutation([<span class="string">"hello"</span>, <span class="string">"hey"</span>]);</span><br></pre></td></tr></table></figure><h3 id="删除数组中的所有假值。"><a href="#删除数组中的所有假值。" class="headerlink" title="# 删除数组中的所有假值。"></a># 删除数组中的所有假值。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bouncer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(val !== (<span class="literal">undefined</span> &amp;&amp; <span class="literal">null</span> &amp;&amp; <span class="string">""</span> &amp;&amp; <span class="literal">NaN</span> &amp;&amp; <span class="literal">false</span> &amp;&amp; <span class="number">0</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bouncer([<span class="number">7</span>, <span class="string">"ate"</span>, <span class="string">""</span>, <span class="literal">false</span>, <span class="number">9</span>]);</span><br></pre></td></tr></table></figure><h3 id="数组排序并找出元素索引，先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。"><a href="#数组排序并找出元素索引，先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。" class="headerlink" title="# 数组排序并找出元素索引，先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。"></a># 数组排序并找出元素索引，先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">where</span>(<span class="params">arr, num</span>) </span>&#123;</span><br><span class="line">  arr.push(num);</span><br><span class="line">  arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">  &#125;);  </span><br><span class="line">  <span class="keyword">return</span> arr.indexOf(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">where([<span class="number">40</span>, <span class="number">60</span>], <span class="number">50</span>);</span><br></pre></td></tr></table></figure><h3 id="实现一个摧毁-destroyer-函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。"><a href="#实现一个摧毁-destroyer-函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。" class="headerlink" title="# 实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。"></a># 实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。</h3><ul><li><a href="http://blog.csdn.net/wangmc0827/article/details/72529116" target="_blank" rel="noopener">FCC–Seek and Destroy（摧毁数组）</a></li><li><a href="http://www.cnblogs.com/codepen2010/p/6824934.html" target="_blank" rel="noopener">Seek and Destroy(算法)</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroyer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">var</span> arg = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;arg.length; i++) &#123;</span><br><span class="line">    newArr.push(arg[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  arr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> newArr.indexOf(val) &lt; <span class="number">0</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">destroyer([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><blockquote><p>发表于<a href="http://www.imooc.com/article/20814" target="_blank" rel="noopener">慕课网手记</a></p></blockquote><blockquote><p>题目来自： <strong>FreeCodeCamp</strong> <a href="https://freecodecamp.cn/map-aside#nested-collapseBasicAlgorithmScripting" target="_blank" rel="noopener">BasicAlgorithmScripting</a><br>参考资料： <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener">JavaScript标准库</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Github报错fatal unable to access No such file or directory</title>
      <link href="/2018/07/30/github-01/"/>
      <url>/2018/07/30/github-01/</url>
      
        <content type="html"><![CDATA[<p>之前有安装过github旧版，一直正常，后来更新了新版，但是<code>git pull</code>的时候如有如下报错：<br><a id="more"></a></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access 'https://github.com/eefocus/deploy.git/': schannel: failed to open CA file 'C:/Users/Administrator/AppData/Local/GitHubDesktop/app-1.2.3/resources/app/git/mingw64/bin/curl-ca-bundle.crt': No such file or directory</span><br></pre></td></tr></table></figure><ul><li>找到<code>C:\ProgramData\Git\config</code>，打开，修改<code>sslCAinfo</code>（路径得看自己文件相对应的位置）如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">symlinks = true</span><br><span class="line">autocrlf = true</span><br><span class="line">fscache = true</span><br><span class="line">[color]</span><br><span class="line">diff = auto</span><br><span class="line">status = auto</span><br><span class="line">branch = auto</span><br><span class="line">interactive = true</span><br><span class="line">[pack]</span><br><span class="line">[help]</span><br><span class="line">format = html</span><br><span class="line">[https]</span><br><span class="line">sslCAinfo = C:/Users/Administrator/AppData/Local/GitHubDesktop/app-1.2.6/resources/app/git/mingw64/ssl/certs/curl-ca-bundle.crt</span><br><span class="line">[sendemail]</span><br><span class="line">smtpserver = /bin/msmtp.exe</span><br><span class="line"></span><br><span class="line">[diff &quot;astextplain&quot;]</span><br><span class="line">textconv = astextplain</span><br><span class="line">[rebase]</span><br><span class="line">autosquash = true</span><br></pre></td></tr></table></figure><ul><li><strong>重点提示</strong>：默认的是<code>[http]</code>，如果有必要你需要改成<code>[https]</code></li><li>如果找不到<code>C:\ProgramData</code>文件（我的是win10），在查看下将隐藏的项目打个勾<br><img src="https://user-images.githubusercontent.com/19526072/43298424-81590c1a-9188-11e8-8968-666bdd839ced.png" alt="打开隐藏文件"></li></ul><blockquote><p>参考：<a href="http://www.mamicode.com/info-detail-2368065.html" target="_blank" rel="noopener">GitHub Desktop报错fatal: unable to access ‘https://github.com……: schannel: failed to open CA file ‘C:/Users……bundle.crt’: No such file or directory的解决办法</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端学习资料峡谷</title>
      <link href="/2018/07/06/dev-data/"/>
      <url>/2018/07/06/dev-data/</url>
      
        <content type="html"><![CDATA[<h3 id="学习资料站"><a href="#学习资料站" class="headerlink" title="学习资料站"></a>学习资料站</h3><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><ul><li><strong><a href="https://juejin.im/post/5a0c1956f265da430a501f51" target="_blank" rel="noopener">(2017)个人分享–web前端学习资源分享</a></strong></li><li><strong><a href="https://developer.mozilla.org/zh-CN/docs/Learn" target="_blank" rel="noopener">学习 Web 开发</a></strong></li><li><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide" target="_blank" rel="noopener">Web开发者指南</a></strong></li><li><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/Tutorials" target="_blank" rel="noopener">教程</a></strong></li><li><strong><a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">W3school</a></strong></li><li><strong><a href="https://www.w3.org/" target="_blank" rel="noopener">W3C</a></strong></li><li><strong><a href="http://www.hewebgl.com/" target="_blank" rel="noopener">WebGL中文网</a></strong></li></ul><a id="more"></a><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><ul><li><strong><a href="http://es6.ruanyifeng.com/#docs/intro" target="_blank" rel="noopener">ECMAScript 6入门</a></strong></li><li><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">JavaScript</a></strong></li><li><strong><a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651552568&amp;idx=1&amp;sn=2c85a858b0a28d1c256354312f535f13&amp;chksm=8025acf9b75225efea70a70b3d753bd53ec596f2d90371d960d5643e8c5946cea79f355c7513&amp;mpshare=1&amp;scene=23&amp;srcid=0906yyeOcwhCqvE1DrkomSbR#rd" target="_blank" rel="noopener">怎么学 JavaScript？</a></strong></li><li><strong><a href="http://www.jianshu.com/p/72e318848de8" target="_blank" rel="noopener">10个最佳的JavaScript风格指南</a></strong></li></ul><h4 id="框架、库"><a href="#框架、库" class="headerlink" title="框架、库"></a>框架、库</h4><ul><li><strong><a href="http://www.bootcss.com/" target="_blank" rel="noopener">前端框架、资料汇集</a></strong></li><li><strong><a href="https://www.lodashjs.com/" target="_blank" rel="noopener">Lodash</a></strong>— 是一个一致性、模块化、高性能的 JavaScript 实用工具库。</li><li><strong><a href="http://www.bootcss.com/p/headroom.js/" target="_blank" rel="noopener">Headroom.js</a></strong>— 为页面顶部多留些空间。在不需要页头时将其隐藏。</li><li><strong><a href="http://www.bootcss.com/p/icheck/" target="_blank" rel="noopener">iCheck</a></strong>—增强复选框和单选按钮</li><li><strong><a href="http://www.hewebgl.com/article/articledir/1" target="_blank" rel="noopener">Three.js</a></strong>— 是JavaScript编写的WebGL第三方库。提供了非常多的3D显示功能。</li></ul><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><ul><li><strong><a href="https://github.com/geeeeeeeeek/git-recipes" target="_blank" rel="noopener">高质量的Git中文教程</a></strong>—该Wiki的编者非常认真细致地总结和翻译了许多Github知识和技巧</li><li><strong><a href="http://www.yangzhiping.com/tech/github.html" target="_blank" rel="noopener">如何高效利用GitHub</a></strong></li><li><strong><a href="http://www.bootcss.com/p/git-guide/" target="_blank" rel="noopener">Git - 简易指南</a></strong></li><li><strong><a href="https://zhuanlan.zhihu.com/p/24081900" target="_blank" rel="noopener">全面理解Git</a></strong></li><li><strong><a href="https://gruntjs.com/" target="_blank" rel="noopener">Grunt</a></strong>—项目构建工具</li><li><strong><a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">Gulp</a></strong>—用自动化构建工具增强你的工作流程！</li><li><strong><a href="https://webpack.bootcss.com/" target="_blank" rel="noopener">Webpack</a></strong>—前端资源模块化管理和打包工具</li><li><strong><a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="noopener">入门Webpack，看这篇就够了</a></strong></li></ul><h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h4><ul><li><strong><a href="http://www.zhangxinxu.com/" target="_blank" rel="noopener">张鑫旭</a></strong></li><li><strong><a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰的官方网站</a></strong></li><li><strong><a href="http://www.ruanyifeng.com/blog/javascript/" target="_blank" rel="noopener">阮一峰的网络日志之JavaScript</a></strong><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4></li><li><strong><a href="http://blog.jobbole.com/105633/" target="_blank" rel="noopener">HTTPS 工作原理和 TCP 握手机制</a></strong></li></ul><h3 id="快速查找区"><a href="#快速查找区" class="headerlink" title="快速查找区"></a>快速查找区</h3><ul><li><strong><a href="https://github.com/yangtao2o/learninglog/wiki/JavaScript经典实例#regexp" target="_blank" rel="noopener">正则表达式特殊字符</a></strong></li></ul><h3 id="学习书籍"><a href="#学习书籍" class="headerlink" title="学习书籍"></a>学习书籍</h3><ul><li><p><strong><a href="https://github.com/yangtao2o/learninglog/wiki/JavaScript经典实例" target="_blank" rel="noopener">JavaScript经典实例</a></strong> </p><ul><li>慕课网手记<a href="http://www.imooc.com/article/20555" target="_blank" rel="noopener">归纳《JavaScript经典实例》之JS不只是简单的构件块</a></li></ul></li><li><p><strong><a href="https://freecodecamp.cn/map-aside#nested-collapseBasicAlgorithmScripting" target="_blank" rel="noopener">FreeCodeCamp</a></strong></p><ul><li>慕课网发布手记 <a href="http://www.imooc.com/article/20814" target="_blank" rel="noopener">JavaScript算法初级练习</a></li></ul></li></ul><h3 id="个人手记集锦"><a href="#个人手记集锦" class="headerlink" title="个人手记集锦"></a>个人手记集锦</h3><ul><li><strong><a href="http://www.imooc.com/u/3120512/articles" target="_blank" rel="noopener">慕课网手记</a></strong></li><li><strong><a href="https://www.qdfuns.com/u/32286.html" target="_blank" rel="noopener">前端网笔记</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 前端学习资料 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo常用命令集合</title>
      <link href="/2018/07/06/hexo-order/"/>
      <url>/2018/07/06/hexo-order/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">简写</th><th></th><th></th></tr></thead><tbody><tr><td style="text-align:left">hexo n “我的博客”</td><td>hexo new “我的博客”</td><td>#新建文章</td></tr><tr><td style="text-align:left">hexo p</td><td>hexo publish</td></tr><tr><td style="text-align:left">hexo g</td><td>hexo generate</td><td>#生成</td></tr><tr><td style="text-align:left">hexo s</td><td>hexo server</td><td>#启动服务预览</td></tr><tr><td style="text-align:left">hexo d</td><td>hexo deploy</td><td>#部署</td></tr></tbody></table><a id="more"></a><table><thead><tr><th style="text-align:left">服务器</th><th></th></tr></thead><tbody><tr><td style="text-align:left">hexo server #Hexo</td><td>会监视文件变动并自动更新，您无须重启服务器。</td></tr><tr><td style="text-align:left">hexo server -s</td><td>#静态模式</td></tr><tr><td style="text-align:left">hexo server -p 5000</td><td>#更改端口</td></tr><tr><td style="text-align:left">hexo server -i 192.168.1.1</td><td>#自定义 IP</td></tr><tr><td style="text-align:left">hexo clean</td><td>#清除缓存 网页正常情况下可以忽略此条命令</td></tr><tr><td style="text-align:left">hexo g</td><td>#生成静态网页</td></tr><tr><td style="text-align:left">hexo d</td><td>#开始部署</td></tr></tbody></table><table><thead><tr><th style="text-align:left">监视文件变动</th><th></th></tr></thead><tbody><tr><td style="text-align:left">hexo generate</td><td>#使用 Hexo 生成静态文件快速而且简单</td></tr><tr><td style="text-align:left">hexo generate –watch</td><td>#监视文件变动</td></tr></tbody></table><table><thead><tr><th style="text-align:left">完成后部署（两个命令的作用是相同的）</th><th style="text-align:left">草稿</th></tr></thead><tbody><tr><td style="text-align:left">hexo generate –deploy</td><td style="text-align:left">hexo publish [layout] <title></title></td></tr><tr><td style="text-align:left">hexo deploy –generate</td><td style="text-align:left">…</td></tr><tr><td style="text-align:left">hexo deploy -g</td><td style="text-align:left">…</td></tr><tr><td style="text-align:left">hexo server -g</td><td style="text-align:left">…</td></tr></tbody></table><table><thead><tr><th style="text-align:left">模版</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">hexo new “postName”</td><td style="text-align:left">#新建文章</td></tr><tr><td style="text-align:left">hexo new page “pageName”</td><td style="text-align:left">#新建页面</td></tr><tr><td style="text-align:left">hexo generate</td><td style="text-align:left">#生成静态页面至public目录</td></tr><tr><td style="text-align:left">hexo server</td><td style="text-align:left">#开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</td></tr><tr><td style="text-align:left">hexo deploy</td><td style="text-align:left">#将.deploy目录部署到GitHub</td></tr><tr><td style="text-align:left">hexo new [layout] <title></title></td><td style="text-align:left">..</td></tr><tr><td style="text-align:left">hexo new photo “My Gallery”</td><td style="text-align:left">..</td></tr><tr><td style="text-align:left">hexo new “Hello World” –lang tw</td><td style="text-align:left">..</td></tr></tbody></table><blockquote><p>参考 :<a href="https://blog.csdn.net/qq_26975307/article/details/62447489" target="_blank" rel="noopener">Hexo常用命令笔记</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Theme </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于使用Hexo主题Yilia中碰到的问题一二</title>
      <link href="/2018/04/08/yilia/"/>
      <url>/2018/04/08/yilia/</url>
      
        <content type="html"><![CDATA[<ul><li>关于使用主题 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">Yilia</a>的一些问题的集合地：<a href="https://github.com/litten/hexo-theme-yilia/issues" target="_blank" rel="noopener">Issues</a></li></ul><blockquote><p>首推：<a href="http://www.ahonn.me/2016/12/15/create-a-hexo-theme-from-scratch/" target="_blank" rel="noopener">从零开始制作 Hexo 主题 </a></p></blockquote><a id="more"></a><blockquote><p>Q1：主页如何截取文本长度？</p></blockquote><ul><li>在需要截断的位置使用 <code>&lt;!-- More --&gt;</code> 即可</li></ul><blockquote><p>Q2：如何设置多个标签？</p></blockquote><ul><li><code>tags: [Hexo,Theme]</code>，参考<a href="https://www.zhihu.com/question/48934747/answer/113403121" target="_blank" rel="noopener">此处</a></li></ul><blockquote><p>Q3：更换主题的时候报错</p></blockquote><ul><li>一般是由于主题配置文件中的 <code>key: value</code>前后出现了空格，或者之间没有空格导致的 </li></ul><blockquote><p>Q4：如何创建about等页面？如何创建自定义页面？</p></blockquote><ul><li><code>hexo new page &quot;about&quot;</code></li><li>参考<ul><li><a href="https://blog.csdn.net/lcyaiym/article/details/76762105?locationNum=5&amp;fps=1" target="_blank" rel="noopener">hexo的Next创建tags </a></li><li><a href="https://refined-x.com/2017/07/10/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">Hexo自定义页面的方法 </a></li></ul></li></ul><blockquote><p>其他</p></blockquote><ul><li>选择favicon：<a href="http://www.easyicon.net/language.zh-cn/" target="_blank" rel="noopener">easyicon</a></li></ul><p><img src="/img/about-bg.jpg" alt="banner"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Theme </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Hexo+Github搭建自己的个人网站</title>
      <link href="/2018/04/08/hexo/"/>
      <url>/2018/04/08/hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="Hexo-官方文档"><a href="#Hexo-官方文档" class="headerlink" title="Hexo 官方文档"></a><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo 官方文档</a></h3><a id="more"></a><blockquote><p><a href="https://www.jekyll.com.cn/" target="_blank" rel="noopener">将纯文本转化为静态网站和博客框架：jekyll</a></p></blockquote><h3 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h3><ul><li><a href="https://zoumiaojiang.com/article/how-to-build-a-blog/" target="_blank" rel="noopener">快速低成本的搭建一个马马虎虎的博客</a></li><li><a href="https://huangxuan.me/" target="_blank" rel="noopener">Hux Blog一生想做浪漫极客</a></li><li><a href="https://www.jianshu.com/p/b96fd206571a" target="_blank" rel="noopener">教你定制Hexo的landscape打造自己的主题</a></li><li><a href="http://www.codertian.com/2015/11/26/github-hexo-blog/" target="_blank" rel="noopener">【实用技能】使用github+Hexo人人都能拥有一个博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a></li><li><a href="https://blog.csdn.net/guin_guo/article/details/51090481" target="_blank" rel="noopener">使用github page + hexo3.0 搭建个人博客，加绑定域名。</a></li><li>【很详细】<a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="noopener">hexo从零开始到搭建完整</a></li></ul><h3 id="主题推荐"><a href="#主题推荐" class="headerlink" title="主题推荐"></a>主题推荐</h3><ul><li>合集：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes|Hexo</a> </li><li><a href="https://www.jianshu.com/p/bcdbe7347c8d" target="_blank" rel="noopener">Hexo博客主题推荐</a></li><li><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">hexo-theme-yilia</a></li><li><a href="https://blog.csdn.net/u011026329/article/details/52939341" target="_blank" rel="noopener">Yelee —— 简而不减 Hexo 双栏博客主题</a></li><li><a href="https://material.viosey.com/docs/#/start" target="_blank" rel="noopener">Material Theme</a></li><li><a href="http://haojen.github.io/" target="_blank" rel="noopener">Haojen ‘s Blog</a> <ul><li><a href="https://haojen.github.io/2017/05/09/Anisina-%E4%B8%AD%E6%96%87%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">Anisina 中文使用教程</a></li></ul></li><li><a href="https://blog.daraw.cn/" target="_blank" rel="noopener">DaraW</a><ul><li><a href="https://github.com/CodeDaraW/Hacker" target="_blank" rel="noopener">Hacker</a></li></ul></li><li><a href="https://github.com/BoizZ/hexo-theme-laughing" target="_blank" rel="noopener">laughing</a></li><li><a href="http://www.ccblog.win/" target="_blank" rel="noopener">http://www.ccblog.win/</a></li><li><a href="https://github.com/CodeDaraW/Hacker" target="_blank" rel="noopener">Hacker</a></li><li>加载速度快列表页：<a href="http://blog.minfive.com/" target="_blank" rel="noopener">A simple &amp; beautiful &amp; fast theme for Hexo</a></li><li>偏向Vue：<a href="https://github.com/yanm1ng/hexo-theme-vexo" target="_blank" rel="noopener">Vexo</a></li><li>设计类：<a href="https://github.com/miccall/hexo-theme-Mic_Theme" target="_blank" rel="noopener">Mic_Theme</a></li><li>酷炫类：<ul><li><a href="https://github.com/ochukai/hexo-theme-ochuunn" target="_blank" rel="noopener">hexo-theme-ochuunn</a></li><li><a href="http://firework.studio/archer-demo/" target="_blank" rel="noopener">Archer</a></li></ul></li><li>扁平化类：<a href="http://blog.minfive.com/" target="_blank" rel="noopener">A simple &amp; beautiful &amp; fast theme for Hexo</a><ul><li><a href="https://github.com/Mrminfive/hexo-theme-skapp" target="_blank" rel="noopener">hexo-theme-skapp</a></li></ul></li><li>简洁、明了<ul><li><a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">hexo-theme-huxblog</a> </li><li><a href="http://gaoryrt.com/" target="_blank" rel="noopener">A plain theme for Hexo</a> — 比较个性化</li><li><a href="https://blog.daraw.cn/" target="_blank" rel="noopener">DARAW</a></li><li><a href="https://mikecoder.github.io/oj-code/" target="_blank" rel="noopener">hexo-theme-gandalfr</a></li><li><a href="http://www.ahonn.me/" target="_blank" rel="noopener">Even</a></li></ul></li><li>卡片式：<a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">Material X</a><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3></li><li><a href="http://moxfive.xyz/" target="_blank" rel="noopener">MOxFIVE</a> </li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li><a href="https://www.zhihu.com/question/52272170" target="_blank" rel="noopener">hexo+Github Page搭建的博客无法加载样式表？</a></li><li><a href="https://segmentfault.com/a/1190000007385345" target="_blank" rel="noopener">hexo githubpage 初始化 并解决同步静态页面问题</a></li><li><a href="https://help.github.com/articles/changing-a-remote-s-url/" target="_blank" rel="noopener">Changing a remote’s URL</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习《JavaScript经典实例》之第3章</title>
      <link href="/2018/04/08/js-chapter-3/"/>
      <url>/2018/04/08/js-chapter-3/</url>
      
        <content type="html"><![CDATA[<h3 id="第3章-JavaScript的构建块"><a href="#第3章-JavaScript的构建块" class="headerlink" title="第3章 JavaScript的构建块"></a>第3章 JavaScript的构建块</h3><a id="more"></a><h4 id="3种基本的创建函数方式："><a href="#3种基本的创建函数方式：" class="headerlink" title="3种基本的创建函数方式："></a>3种基本的创建函数方式：</h4><ul><li>声明式函数</li><li>匿名函数或函数构造函数</li><li>函数字面值或函数表达式</li></ul><h4 id="3-1-放置函数并提升"><a href="#3-1-放置函数并提升" class="headerlink" title="3.1 放置函数并提升"></a>3.1 放置函数并提升</h4><ul><li>声明式函数，可以放置在代码中的任何位置；函数表达式，必须将其放置在使用函数的位置之前</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在声明一个变量之前打印a</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>, a);  <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="comment">// 在声明一个变量并赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'aa'</span>, aa);  <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> aa = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明变量发生了提升，但是赋值并没有，赋值是在相应的位置发生的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明式函数，在访问该函数之前，提升将确保把函数声明移动到当前作用域的顶部</span></span><br><span class="line"><span class="built_in">console</span>.log(mytest());  <span class="comment">//success</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mytest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'success'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用函数表达式就会报错，变量可能声明了，但没有实例化，但是你的代码试图将这个变量当做一个函数对待</span></span><br><span class="line"><span class="built_in">console</span>.log(mytest2());  <span class="comment">//TypeError: mytest2 is not a function</span></span><br><span class="line"><span class="keyword">var</span> mytest2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'success2'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-把一个函数当做参数传递给另一个函数"><a href="#3-2-把一个函数当做参数传递给另一个函数" class="headerlink" title="3.2 把一个函数当做参数传递给另一个函数"></a>3.2 把一个函数当做参数传递给另一个函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">otherFunction</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">x(y, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以像传递一个命名的变量一样，将一个函数作为参数传递给另一个函数</span></span><br><span class="line"><span class="keyword">var</span> param = <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a1, a2</span>) </span>&#123; alert(a1 + <span class="string">" "</span> + a2); &#125;;</span><br><span class="line">otherFunction(param, <span class="string">"Hello"</span>, <span class="string">"World"</span>);</span><br></pre></td></tr></table></figure><ul><li>函数式编程和JavaScript<ul><li><strong>高阶函数：</strong> 一个函数接受另一个函数作为参数，或者返回一个函数，或者两者都具备</li><li><strong>函数式编程：</strong> 对应用程序复杂性进行抽象的一种方式，使用整齐、干净的函数调用替代了复杂的循环和条件语句（代码可读性高）</li><li>比如：将数组中的所有数字相加</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for循环相加</span></span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">18</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">sum += nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sum'</span>, sum);  <span class="comment">//75</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nums2 = [<span class="number">1</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">18</span>];</span><br><span class="line"><span class="keyword">var</span> sum2 = nums2.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sum2'</span>, sum2);  <span class="comment">//75</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce_clone" target="_blank" rel="noopener">arr.reduce([callback, initialValue])</a> 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。</li></ul><h4 id="3-3-实现递归算法"><a href="#3-3-实现递归算法" class="headerlink" title="3.3 实现递归算法"></a>3.3 实现递归算法</h4><ul><li>想要实现一个函数，它递归地遍历一个数组并返回一个反向的数组字符串</li><li>缺点：递归很消耗内存</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> n == <span class="number">1</span> ? n : n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'阶乘'</span>, factorial(<span class="number">4</span>));  <span class="comment">// 24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 斐波那契</span></span><br><span class="line"><span class="keyword">var</span> fibonacci = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> n &lt; <span class="number">2</span> ? n : fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'斐波那契'</span>, fibonacci(<span class="number">10</span>));  <span class="comment">//55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用一个递归函数字面值来反转数组元素，从最大长度开始，每次迭代都将这个值自减</span></span><br><span class="line"><span class="comment">// 当为 0 时，返回字符串</span></span><br><span class="line"><span class="keyword">var</span> reverseArrary = <span class="function"><span class="keyword">function</span>(<span class="params">x, index, str</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> index == <span class="number">0</span> ? str : reverseArrary(x, --index, (str += <span class="string">" "</span> + x[index]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'peach'</span>, <span class="string">'lime'</span>];</span><br><span class="line"><span class="keyword">var</span> str = reverseArrary(arr, arr.length, <span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'str'</span>, str);  <span class="comment">//lime peach orange apple</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要反过来，按照顺序把数组连接为一个字符串</span></span><br><span class="line"><span class="keyword">var</span> orderArray = <span class="function"><span class="keyword">function</span>(<span class="params">x, i, str</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> i == x.length - <span class="number">1</span> ? str : orderArray(x, ++i, (str += x[i] + <span class="string">" "</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> numStr = orderArray(numArr, <span class="number">-1</span>, <span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'numStr'</span>, numStr);  <span class="comment">//1 2 3 4</span></span><br></pre></td></tr></table></figure><h4 id="3-4-使用一个定时器和回调防止代码阻塞"><a href="#3-4-使用一个定时器和回调防止代码阻塞" class="headerlink" title="3.4 使用一个定时器和回调防止代码阻塞"></a>3.4 使用一个定时器和回调防止代码阻塞</h4><ul><li>在程序的输出中，3个外围的 <code>console.log()</code> 立即被处理了</li><li>队列中下一个事件是第一个 <code>noBlock()</code> 函数调用，其中又调用了 <code>factorial()</code> ，记录了其运行时候的活动，最后跟着回调函数的调用</li><li>第二次同样地调用了 <code>callBack()</code></li><li>第三次调用 <code>callBack()</code> 的时候，回调函数中的调用针对第一次 <code>callBack()</code> ，并使用了第一次函数调用的最终结果：6</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'n'</span>, n);</span><br><span class="line"><span class="keyword">return</span> n == <span class="number">1</span> ? <span class="number">1</span> : n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noBlock</span>(<span class="params">n, callback</span>) </span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> val = factorial(n);</span><br><span class="line"><span class="keyword">if</span>(callback &amp;&amp; <span class="keyword">typeof</span> callback == <span class="string">'function'</span>) &#123;</span><br><span class="line">callback(val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Top of the morning to you'</span>);</span><br><span class="line">noBlock(<span class="number">3</span>, <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'first call ends width '</span> + n);</span><br><span class="line">noBlock(n, <span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'final result is '</span> + m);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tst = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">tst += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'value of tst is '</span> + tst);</span><br><span class="line">noBlock(<span class="number">4</span>, <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end result is '</span> + n);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'not doing too much'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>待续~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript经典实例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习《JavaScript经典实例》之第2章</title>
      <link href="/2018/04/08/js-chapter-2/"/>
      <url>/2018/04/08/js-chapter-2/</url>
      
        <content type="html"><![CDATA[<h3 id="第2章-JavaScript数组"><a href="#第2章-JavaScript数组" class="headerlink" title="第2章 JavaScript数组"></a>第2章 JavaScript数组</h3><a id="more"></a><h4 id="2-1-在数组中搜索"><a href="#2-1-在数组中搜索" class="headerlink" title="2.1 在数组中搜索"></a>2.1 在数组中搜索</h4><ul><li><code>indexOf()、lastIndexOf()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'seal'</span>, <span class="string">'elephant'</span>, <span class="string">'walrus'</span>, <span class="string">'lion'</span>);</span><br><span class="line"><span class="keyword">var</span> index = animals.indexOf(<span class="string">'cat'</span>);</span><br><span class="line"><span class="keyword">var</span> index2 = animals.lastIndexOf(<span class="string">'lion'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'i'</span>,index);  <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'i2'</span>,index2);  <span class="comment">//5</span></span><br></pre></td></tr></table></figure><ul><li><a href="http://www.runoob.com/jsref/jsref-findindex.html" target="_blank" rel="noopener">findIndex()</a> 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">199</span>, <span class="number">80</span>, <span class="number">400</span>, <span class="number">30</span>, <span class="number">90</span>];</span><br><span class="line"><span class="keyword">var</span> over = nums.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (ele &gt;= <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'nums'</span>,nums[over]);  <span class="comment">//199</span></span><br></pre></td></tr></table></figure><h4 id="2-2-用concat-和apply-将一个二维数组扁平化"><a href="#2-2-用concat-和apply-将一个二维数组扁平化" class="headerlink" title="2.2 用concat()和apply()将一个二维数组扁平化"></a>2.2 用concat()和apply()将一个二维数组扁平化</h4><ul><li>concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。<ul><li><code>arrayObject.concat(arrayX,arrayX,......,arrayX)</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruitarray = [];</span><br><span class="line">fruitarray[<span class="number">0</span>] = [<span class="string">'stranwberry'</span>, <span class="string">'orange'</span>];</span><br><span class="line">fruitarray[<span class="number">1</span>] = [<span class="string">'lime'</span>, <span class="string">'peach'</span>, <span class="string">'banana'</span>];</span><br><span class="line">fruitarray[<span class="number">2</span>] = [<span class="string">'tangerine'</span>, <span class="string">'apricot'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'array'</span>,fruitarray.concat());</span><br><span class="line"><span class="keyword">var</span> newArray = fruitarray.concat.apply([], fruitarray);</span><br><span class="line"><span class="built_in">console</span>.log(newArray);</span><br></pre></td></tr></table></figure><ul><li><a href="http://www.cnblogs.com/lengyuehuahun/p/5643625.html" target="_blank" rel="noopener">apply()与call()的区别</a></li><li><a href="https://www.zhihu.com/question/20289071" target="_blank" rel="noopener">如何理解和熟练运用js中的call及apply？</a><ul><li><code>obj.call(thisObj, arg1, arg2, ...);</code></li><li><code>obj.apply(thisObj, [arg1, arg2, ...]);</code></li></ul></li><li>call() &amp; apply()，动态改变this</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'add'</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sum'</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">//Window</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">//Window</span></span><br><span class="line"></span><br><span class="line">add.call(sum, <span class="number">1</span>, <span class="number">2</span>);  <span class="comment">//sum(a, b)</span></span><br><span class="line">sum.call(add, <span class="number">1</span>, <span class="number">2</span>);  <span class="comment">//add(a ,b)</span></span><br></pre></td></tr></table></figure><ul><li>arguments装换为数组, 返回的是数组，但是arguments本身保持不变</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arg = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"><span class="comment">// [].slice.call(document.getElementsByTagName('li'));</span></span><br></pre></td></tr></table></figure><ul><li>借用别人的方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">name: <span class="string">'jack'</span>,</span><br><span class="line">showName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this name:'</span>,<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = &#123;</span><br><span class="line">name: <span class="string">'rose'</span></span><br><span class="line">&#125;</span><br><span class="line">foo.showName();  <span class="comment">//jack</span></span><br><span class="line">foo.showName.call(bar);  <span class="comment">//rose</span></span><br></pre></td></tr></table></figure><ul><li>实现继承</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">name, age, high</span>) </span>&#123;</span><br><span class="line">Person.call(<span class="keyword">this</span>, name, age);</span><br><span class="line"><span class="keyword">this</span>.high = high;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>封装对象保证this的指向</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">_this.$box.on(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> _this.fndown.apply(_this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-删除或替换数组元素"><a href="#2-3-删除或替换数组元素" class="headerlink" title="2.3 删除或替换数组元素"></a>2.3 删除或替换数组元素</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">splice()</a> 方法与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">slice()</a> 方法的作用是不同的，splice() 方法会直接对数组进行修改。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'rabbit'</span>, <span class="string">'pig'</span>, <span class="string">'apple'</span>);</span><br><span class="line"><span class="comment">// 从数组删除元素</span></span><br><span class="line">animals.splice(animals.indexOf(<span class="string">'apple'</span>), <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animals);  <span class="comment">// ["dog", "cat", "rabbit", "pig"]</span></span><br><span class="line"><span class="comment">// 替换</span></span><br><span class="line">animals.splice(animals.indexOf(<span class="string">'pig'</span>), <span class="number">1</span>, <span class="string">'monkey'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animals);  <span class="comment">//["dog", "cat", "rabbit", "monkey"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用循环和分割来替换和删除元素</span></span><br><span class="line"><span class="keyword">var</span> charSets = [<span class="string">"ab"</span>, <span class="string">"bb"</span>, <span class="string">"cd"</span>, <span class="string">"ab"</span>, <span class="string">"cc"</span>, <span class="string">"ab"</span>, <span class="string">"dd"</span>, <span class="string">"ab"</span>];</span><br><span class="line"><span class="keyword">while</span>(charSets.indexOf(<span class="string">'ab'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">charSets.splice(charSets.indexOf(<span class="string">'ab'</span>), <span class="number">1</span>, <span class="string">'**'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(charSets);  <span class="comment">//["**", "bb", "cd", "**", "cc", "**", "dd", "**"]</span></span><br><span class="line"><span class="keyword">while</span>(charSets.indexOf(<span class="string">'**'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">charSets.splice(charSets.indexOf(<span class="string">'**'</span>), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(charSets); <span class="comment">//["bb", "cd", "cc", "dd"]</span></span><br></pre></td></tr></table></figure><h4 id="2-4-提取一个数组中的一部分"><a href="#2-4-提取一个数组中的一部分" class="headerlink" title="2.4 提取一个数组中的一部分"></a>2.4 提取一个数组中的一部分</h4><ul><li>不更改原数组，使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">slice()</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'rabbit'</span>, <span class="string">'pig'</span>, <span class="string">'apple'</span>);</span><br><span class="line"><span class="keyword">var</span> newAnimals = animals.slice(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animals);  <span class="comment">//["dog", "cat", "rabbit", "pig", "apple"]</span></span><br><span class="line"><span class="built_in">console</span>.log(newAnimals);  <span class="comment">//["cat"]</span></span><br></pre></td></tr></table></figure><h4 id="2-5-对每一个数组元素应用一个函数"><a href="#2-5-对每一个数组元素应用一个函数" class="headerlink" title="2.5 对每一个数组元素应用一个函数"></a>2.5 对每一个数组元素应用一个函数</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/forEach" target="_blank" rel="noopener">Array.prototype.forEach()</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> charSets = [<span class="string">"ab"</span>, <span class="string">"bb"</span>, <span class="string">"cd"</span>, <span class="string">"ab"</span>, <span class="string">"cc"</span>, <span class="string">"ab"</span>, <span class="string">"dd"</span>, <span class="string">"ab"</span>];</span><br><span class="line">charSets.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(element == <span class="string">'ab'</span>) array[index] = <span class="string">'**'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(charSets);  <span class="comment">//["**", "bb", "cd", "**", "cc", "**", "dd", "**"]</span></span><br></pre></td></tr></table></figure><h4 id="2-6-使用forEach-和call-遍历querySelectorAll-的结果"><a href="#2-6-使用forEach-和call-遍历querySelectorAll-的结果" class="headerlink" title="2.6 使用forEach()和call()遍历querySelectorAll()的结果"></a>2.6 使用forEach()和call()遍历querySelectorAll()的结果</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/querySelectorAll" target="_blank" rel="noopener">querySelectorAll()</a></li><li>可以将forEach()强制和一个NodeList一起使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">'td + td'</span>);</span><br><span class="line">[].forEach.call(cells, <span class="function"><span class="keyword">function</span>(<span class="params">cell</span>) </span>&#123;</span><br><span class="line">sum += <span class="built_in">parseFloat</span>(cell.firstChild.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2-7-对数组中的每个元素执行一个函数并返回一个新数组"><a href="#2-7-对数组中的每个元素执行一个函数并返回一个新数组" class="headerlink" title="2.7 对数组中的每个元素执行一个函数并返回一个新数组"></a>2.7 对数组中的每个元素执行一个函数并返回一个新数组</h4><ul><li>将一个十进制的数组转化为新的等价的十六进制数组</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">map()</a>方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</li><li>与forEach()不同，不会修改原数组，但是必须返回一个值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> decArray = [<span class="number">23</span>, <span class="number">3</span>, <span class="number">24</span>, <span class="number">45</span>, <span class="number">500</span>, <span class="number">9</span>, <span class="number">70</span>];</span><br><span class="line"><span class="keyword">var</span> hexArray = decArray.map(<span class="function"><span class="keyword">function</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ele.toString(<span class="number">16</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(decArray);  <span class="comment">//[23, 3, 24, 45, 500, 9, 70]</span></span><br><span class="line"><span class="built_in">console</span>.log(hexArray);  <span class="comment">//["17", "3", "18", "2d", "1f4", "9", "46"]</span></span><br></pre></td></tr></table></figure><h4 id="2-8-创建一个过滤后的数组"><a href="#2-8-创建一个过滤后的数组" class="headerlink" title="2.8 创建一个过滤后的数组"></a>2.8 创建一个过滤后的数组</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">filter()</a> 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> charSet = [<span class="string">'**'</span>, <span class="string">'bb'</span>, <span class="string">'cc'</span>, <span class="string">'**'</span>, <span class="string">'cd'</span>];</span><br><span class="line"><span class="keyword">var</span> newArray = charSet.filter(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> element != <span class="string">"**"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArray);  <span class="comment">//["bb", "cc", "cd"]</span></span><br></pre></td></tr></table></figure><h4 id="2-9-验证数组内容"><a href="#2-9-验证数组内容" class="headerlink" title="2.9 验证数组内容"></a>2.9 验证数组内容</h4><ul><li>使用Array <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank" rel="noopener">every()</a>方法来检查每个元素是否符合给定的条件</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">some()</a> 方法确保至少某些元素符合该条件</li><li>区别：every()方法只要函数返回一个false值，处理就会结束，而some()方法会继续测试每个元素，直至返回true，此时，不再验证其他元素，即可返回ture</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testValue</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> testExp = <span class="regexp">/^[a-zA-Z]+$/</span>;</span><br><span class="line"><span class="keyword">return</span> testExp.test(element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> elemSet = [<span class="string">'**'</span>, <span class="number">123</span>, <span class="string">'adv'</span>, <span class="string">'-'</span>, <span class="number">45</span>, <span class="string">'AAA'</span>];</span><br><span class="line"><span class="keyword">var</span> result = elemSet.every(testValue);</span><br><span class="line"><span class="keyword">var</span> result2 = elemSet.some(testValue);</span><br><span class="line"><span class="built_in">console</span>.log(result);  <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(result2);  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> elemSet2 = [<span class="string">'aaa'</span>, <span class="string">'animals'</span>, <span class="string">'vvv'</span>];</span><br><span class="line">result = elemSet2.every(testValue);</span><br><span class="line">result2 = elemSet2.some(testValue);</span><br><span class="line"><span class="built_in">console</span>.log(result);  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(result2);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="2-10-使用一个关联数组来存储表单元素名和值"><a href="#2-10-使用一个关联数组来存储表单元素名和值" class="headerlink" title="2.10 使用一个关联数组来存储表单元素名和值"></a>2.10 使用一个关联数组来存储表单元素名和值</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/keys" target="_blank" rel="noopener">keys()</a> 方法返回一个新的Array迭代器，它包含数组中每个索引的键。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elemArray = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="number">0</span>];</span><br><span class="line">elemArray[elem.id] = elem.value;</span><br><span class="line"><span class="keyword">var</span> elemArray = &#123;<span class="attr">name</span>: <span class="string">'yt'</span>, <span class="attr">age</span>:<span class="number">25</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(elemArray).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> value = elemArray[key];</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>待续~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript经典实例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习《JavaScript经典实例》之第1章</title>
      <link href="/2018/04/08/js-chapter-1/"/>
      <url>/2018/04/08/js-chapter-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>《JavaScript经典实例》各节中的完整代码解决了常见的编程问题，并且给出了在任何浏览器中构建Web应用程序的技术。只需要将这些代码示例复制并粘贴到你自己的项目中就行了，可以快速完成工作，并且在此过程中学习JavaScript的很多知识。</p></blockquote><h3 id="第1章-JavaScript不只是简单的构件块"><a href="#第1章-JavaScript不只是简单的构件块" class="headerlink" title="第1章 JavaScript不只是简单的构件块"></a>第1章 JavaScript不只是简单的构件块</h3><h4 id="1-1-JavaScript对象、基本类型和字面值之间的区别"><a href="#1-1-JavaScript对象、基本类型和字面值之间的区别" class="headerlink" title="1.1 JavaScript对象、基本类型和字面值之间的区别"></a>1.1 JavaScript对象、基本类型和字面值之间的区别</h4><ul><li><p>5种基本类型：字符串、数值、布尔值、null、undefined，有3个有对应的构造方法对象:string、Number、Boolean </p></li><li><p>基本类型变量严格等于字面值，而对象实例则不会，因为基本类型是按值来比较的，而值是字面值</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num1);  <span class="comment">//number </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num2);  <span class="comment">//object</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="1-2-从字符串提取一个列表"><a href="#1-2-从字符串提取一个列表" class="headerlink" title="1.2 从字符串提取一个列表"></a>1.2 从字符串提取一个列表</h4><ul><li>提取之前：<code>This is a list of items: cherries, limes, oranges, apples.</code></li><li>提取之后：<code>[&#39;cherries&#39;,&#39;limes&#39;,&#39;oranges&#39;,&#39;apples&#39;]</code></li><li><strong><a href="http://www.w3school.com.cn/jsref/jsref_indexOf.asp" target="_blank" rel="noopener">indexOf()</a></strong> 方法可返回某个指定的字符串值在字符串中首次出现的位置。</li><li><strong><a href="http://www.w3school.com.cn/jsref/jsref_substring.asp" target="_blank" rel="noopener">substring()</a></strong> 方法用于提取字符串中介于两个指定下标之间的字符。</li><li><strong><a href="http://www.w3school.com.cn/jsref/jsref_split.asp" target="_blank" rel="noopener">split()</a></strong> 方法用于把一个字符串分割成字符串数组。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sentence = <span class="string">'This is one sentence. This is a sentence with a list of items: cherries, oranges, apples, bananas. That was the list of items.'</span>;</span><br><span class="line"><span class="keyword">var</span> start = sentence.indexOf(<span class="string">':'</span>);</span><br><span class="line"><span class="keyword">var</span> end = sentence.indexOf(<span class="string">'.'</span>, start+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> listStr = sentence.substring(start+<span class="number">1</span>, end);</span><br><span class="line"><span class="keyword">var</span> fruits = listStr.split(<span class="string">','</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fruits);  <span class="comment">//[" cherries", " oranges", " apples", " bananas"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取出空格等</span></span><br><span class="line">fruits.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elmnt,indx,arry</span>) </span>&#123;</span><br><span class="line">    arry[indx] = elmnt.trim();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(fruits);  <span class="comment">//["cherries", "oranges", "apples", "bananas"]</span></span><br></pre></td></tr></table></figure><h4 id="1-3-检查一个存在的、非空的字符串"><a href="#1-3-检查一个存在的、非空的字符串" class="headerlink" title="1.3 检查一个存在的、非空的字符串"></a>1.3 检查一个存在的、非空的字符串</h4><ul><li>想要验证一个变量已经定义了，是一个字符串，并且它不为空</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> unknowVariable === <span class="string">'string'</span> &amp;&amp; unknowVariable.length &gt; <span class="number">0</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-插入特殊字符"><a href="#1-4-插入特殊字符" class="headerlink" title="1.4 插入特殊字符"></a>1.4 插入特殊字符</h4><ul><li>想要向字符串中插入一个特殊字符，例如一个换行</li><li>转义序列都以一个<em>反斜杠</em> 开始（\）</li></ul><h4 id="1-5-使用新字符串替换模式"><a href="#1-5-使用新字符串替换模式" class="headerlink" title="1.5 使用新字符串替换模式"></a>1.5 使用新字符串替换模式</h4><ul><li>使用String对象的replace方法和一个 <strong><a href="http://www.runoob.com/js/js-regexp.html" target="_blank" rel="noopener">正则表达式</a></strong></li><li><strong><a href="http://www.w3school.com.cn/jsref/jsref_replace.asp" target="_blank" rel="noopener">replace()</a></strong> 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</li></ul><h4 id="正则表达式特殊字符"><a href="#正则表达式特殊字符" class="headerlink" title="正则表达式特殊字符"></a>正则表达式特殊字符</h4><table><thead><tr><th>字符</th><th>匹配</th><th>例子</th></tr></thead><tbody><tr><td>^</td><td>匹配输入的开头</td><td>/^This/ 匹配This is…</td></tr><tr><td>$</td><td>匹配输入的结束</td><td>/end$/ 匹配This is the end</td></tr><tr><td>*</td><td>匹配0次或多次</td><td>/se*/ 匹配s seeee或se</td></tr><tr><td>?</td><td>匹配0次或1次</td><td>/ap?/ 匹配apple and and</td></tr><tr><td>+</td><td>匹配1次或多次</td><td>/ap+/ 匹配apple 但是不匹配and</td></tr><tr><td>{n}</td><td>严格匹配n次</td><td>/ap{2}/ 严格匹配apple 但是不匹配apie</td></tr><tr><td>{n,}</td><td>匹配n次或多次</td><td>/ap{2,}/ 匹配apple中的p，但是不匹配apie中的p</td></tr><tr><td>{n,m}</td><td>至少匹配n次，之多匹配m<br>除换行以外的任何字符</td><td>/ap{2,4}/ 匹配apppppple中的4个p<br>/a.e/ 匹配ape和axe</td></tr><tr><td>[…]</td><td>方括号中的任何字符</td><td>/a[px]e/ 匹配ape axe 但是不匹配apxe</td></tr><tr><td>[^…]</td><td>除了方括号以外的任何字符</td><td>/a[^px]/ 匹配ale 但是不匹配ape axe</td></tr><tr><td>\b</td><td>匹配单词边界</td><td>/\bno/ 匹配nono中的第一个no</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>/\Bno/ 匹配nono中的第二个no</td></tr><tr><td>\d</td><td>数字0到9</td><td>/\d{3}/ 匹配Now in 123 中的123</td></tr><tr><td>\D</td><td>匹配任何非数字字符</td><td>/\D{2,4}/ 匹配Now in 123 中的Now in</td></tr><tr><td>\w</td><td>匹配任何单词字符（字母、数组和下划线</td><td>/\w/ 匹配javaScript中的j</td></tr><tr><td>\W</td><td>匹配任何非单词字符（非字母、数组和下划线）</td><td>/\W/ 匹配100%中的%</td></tr><tr><td>\n</td><td>匹配一个换行</td><td></td></tr><tr><td>\s</td><td>一个单个的空白字符</td><td></td></tr><tr><td>\S</td><td>一个单个的非空白字符</td><td></td></tr><tr><td>\t</td><td>一个制表符</td><td></td></tr><tr><td>(x)</td><td>捕获括号</td><td>记住匹配的字符</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchString = <span class="string">"Now is the time, this is the tame"</span>;</span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/t\w&#123;2&#125;e/g</span>;</span><br><span class="line"><span class="keyword">var</span> replacement = searchString.replace(re, <span class="string">'place'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(replacement);  <span class="comment">//Now is the place, this is the place</span></span><br></pre></td></tr></table></figure><h4 id="1-6-找到并突出显示一个模式的所有实例"><a href="#1-6-找到并突出显示一个模式的所有实例" class="headerlink" title="1.6 找到并突出显示一个模式的所有实例"></a>1.6 找到并突出显示一个模式的所有实例</h4><ul><li>RegExp <strong><a href="http://www.w3school.com.cn/jsref/jsref_exec_regexp.asp" target="_blank" rel="noopener">exec()</a></strong> 方法用于检索字符串中的正则表达式的匹配</li><li>RegExpObject.exec(string)</li><li>返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchString2 = <span class="string">"Now is the time and this is the time and that is the time"</span>;</span><br><span class="line"><span class="keyword">var</span> parttern = <span class="regexp">/t\w*e/g</span>;  <span class="comment">//\w 匹配任何单词字符</span></span><br><span class="line"><span class="keyword">var</span> matchArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用regexp exec检查模式，如果不为空，处理它</span></span><br><span class="line"><span class="keyword">while</span>((matchArray = parttern.exec(searchString2)) != <span class="literal">null</span>) &#123;</span><br><span class="line">str += <span class="string">"at "</span> + matchArray.index + <span class="string">" we found "</span> + matchArray[<span class="number">0</span>] + <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">// at 7 we found the</span></span><br><span class="line"><span class="comment">// at 11 we found time</span></span><br><span class="line"><span class="comment">// at 28 we found the</span></span><br><span class="line"><span class="comment">// at 32 we found time</span></span><br><span class="line"><span class="comment">// at 49 we found the</span></span><br><span class="line"><span class="comment">// at 53 we found time</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例1-1</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"searchSubmit"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取模式</span></span><br><span class="line">    <span class="keyword">var</span> pattern = <span class="built_in">document</span>.getElementById(<span class="string">"pattern"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(pattern, <span class="string">"g"</span>);</span><br><span class="line">    <span class="comment">//获取字符串</span></span><br><span class="line">    <span class="keyword">var</span> searchString = <span class="built_in">document</span>.getElementById(<span class="string">"inComing"</span>).value;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> matchArray;</span><br><span class="line">    <span class="keyword">var</span> resultString = <span class="string">"&lt;pre&gt;"</span>;</span><br><span class="line">    <span class="keyword">var</span> first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> last = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找到每一个匹配</span></span><br><span class="line">    <span class="keyword">while</span>((matchArray = re.exec(searchString)) != <span class="literal">null</span>) &#123;</span><br><span class="line">    last = matchArray.index;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取所有匹配的字符串，将其连接起来</span></span><br><span class="line">    resultString += searchString.substring(first, last);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用class，添加匹配的字符串</span></span><br><span class="line">    resultString += <span class="string">'&lt;span class="found"&gt;'</span> + matchArray[<span class="number">0</span>] + <span class="string">'&lt;/span&gt;'</span>;</span><br><span class="line">    first = re.lastIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//完成字符串</span></span><br><span class="line">    resultString += searchString.substring(first, searchString.length);</span><br><span class="line">    resultString += <span class="string">"&lt;/pre&gt;"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//插入页面</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"searchResult"</span>).innerHTML = resultString;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-7-使用捕获圆括号交换一个字符串中的单词"><a href="#1-7-使用捕获圆括号交换一个字符串中的单词" class="headerlink" title="1.7 使用捕获圆括号交换一个字符串中的单词"></a>1.7 使用捕获圆括号交换一个字符串中的单词</h4><ul><li>交换名称，让姓氏先出现</li><li>解决：使用捕获圆括号和一个正则表达式在字符串中找到并记住他们的名字，然后互换他们</li><li><strong><a href="http://www.w3school.com.cn/jsref/jsref_replace.asp" target="_blank" rel="noopener">replace()</a></strong> 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</li></ul><table><thead><tr><th>字符</th><th>替换文本</th></tr></thead><tbody><tr><td>$1、$2、…、$99</td><td>与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</td></tr><tr><td>$&amp;</td><td>与 regexp 相匹配的子串。</td></tr><tr><td>$`</td><td>位于匹配子串左侧的文本。</td></tr><tr><td>$’</td><td>位于匹配子串右侧的文本。</td></tr><tr><td>$$</td><td>允许替换中有一个字面值美元符号($)</td></tr><tr><td>$n</td><td>插入使用RegExp的第n次捕获圆括号的值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">"Tao Yang"</span>;</span><br><span class="line"><span class="keyword">var</span> nameRe = <span class="regexp">/^(\w+)\s(\w+)$/</span>;</span><br><span class="line"><span class="keyword">var</span> myNewName = myName.replace(nameRe, <span class="string">"$2 $1"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myNewName);  <span class="comment">//Yang Tao</span></span><br></pre></td></tr></table></figure><h4 id="1-8-使用命名实体来替代HTML标签"><a href="#1-8-使用命名实体来替代HTML标签" class="headerlink" title="1.8 使用命名实体来替代HTML标签"></a>1.8 使用命名实体来替代HTML标签</h4><ul><li>使用正则表达式把尖括号(&lt;&gt;)转换为命名的实体：&lt;和&gt;</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pieceOfHtml = <span class="string">"&lt;p&gt;This is a &lt;span&gt;paragraph&lt;/span&gt;&lt;/p&gt;"</span>;</span><br><span class="line">pieceOfHtml = pieceOfHtml.replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>);</span><br><span class="line">pieceOfHtml = pieceOfHtml.replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pieceOfHtml); <span class="comment">//&amp;lt;p&amp;gt;This is a &amp;lt;span&amp;gt;paragraph&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-9-ISO-8610格式的日期转换为Date对象可接受的一种形式"><a href="#1-9-ISO-8610格式的日期转换为Date对象可接受的一种形式" class="headerlink" title="1.9 ISO 8610格式的日期转换为Date对象可接受的一种形式"></a>1.9 ISO 8610格式的日期转换为Date对象可接受的一种形式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dtstr = <span class="string">"2014-3-04T19:35:32Z"</span>;</span><br><span class="line">dtstr = dtstr.replace(<span class="regexp">/\D/g</span>, <span class="string">" "</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dtstr);  <span class="comment">//2014 3 04 19 35 32</span></span><br><span class="line"><span class="keyword">var</span> dtcomps = dtstr.split(<span class="string">" "</span>);</span><br><span class="line"><span class="comment">//在基于1的ISO 8610月份和基于0的日期格式之间转换</span></span><br><span class="line">dtcomps[<span class="number">1</span>]--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> convdt = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC.apply(<span class="literal">null</span>, dtcomps));</span><br><span class="line"><span class="built_in">console</span>.log(convdt.toString());  <span class="comment">//Wed Mar 05 2014 03:35:32 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><h4 id="1-10-使用带有定时器的函数闭包"><a href="#1-10-使用带有定时器的函数闭包" class="headerlink" title="1.10 使用带有定时器的函数闭包"></a>1.10 使用带有定时器的函数闭包</h4><ul><li>使用一个匿名函数作为setInterval()或setTimeout()方法调用的第一个参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intervalId = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"redbox"</span>).addEventListener(<span class="string">'click'</span>, startBox, <span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startBox</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(intervalId == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line">        intervalId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            x += <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">var</span> left = x + <span class="string">"px"</span>;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"redbox"</span>).style.left = left;</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        clearInterval(intervalId);</span><br><span class="line">        intervalId = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-11-记录两个事件之间消耗的时间"><a href="#1-11-记录两个事件之间消耗的时间" class="headerlink" title="1.11 记录两个事件之间消耗的时间"></a>1.11 记录两个事件之间消耗的时间</h4><ul><li>在第一个事件发生的时候，创建一个Date对象，当第二个时间发生的时候，创建一个新的Date对象，并且从第二个对象中减去第一个对象。两者之间的差以毫秒表示的，要转换为秒，就除以1000</li><li>两个日期可以相减，但是相加就成了拼接字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    doEvent(firstDate);</span><br><span class="line">&#125;, <span class="number">25000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> secondDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> diff = secondDate - firstDate;</span><br><span class="line">    <span class="built_in">console</span>.log(diff);   <span class="comment">//25001</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-12-十进制数转化为十六进制值"><a href="#1-12-十进制数转化为十六进制值" class="headerlink" title="1.12 十进制数转化为十六进制值"></a>1.12 十进制数转化为十六进制值</h4><ul><li>使用Number对象的 <strong><a href="http://www.w3school.com.cn/jsref/jsref_toString_boolean.asp" target="_blank" rel="noopener">toString()</a></strong> 方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">255</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>));  <span class="comment">//ff</span></span><br></pre></td></tr></table></figure><h4 id="1-13-想要将表中一列的所有数字加和"><a href="#1-13-想要将表中一列的所有数字加和" class="headerlink" title="1.13 想要将表中一列的所有数字加和"></a>1.13 想要将表中一列的所有数字加和</h4><ul><li>遍历表中包含了数字值的列，将其转换为数字，并加和</li><li><strong><a href="http://www.runoob.com/jsref/met-document-queryselector.html" target="_blank" rel="noopener">querySelector()</a></strong>  方法返回文档中匹配指定 CSS 选择器的一个元素</li><li>如果你需要返回所有的元素，请使用 querySelectorAll() 方法替代</li><li>全局函数 <strong><a href="http://www.runoob.com/jsref/jsref-parseint.html" target="_blank" rel="noopener">parseInt()</a></strong> 和 <strong><a href="http://www.runoob.com/jsref/jsref-parsefloat.html" target="_blank" rel="noopener">parseFloat()</a></strong> 都把字符串转化为数字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//使用querySelectorAll找到第二列的所有单元格</span></span><br><span class="line"><span class="keyword">var</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">"td:nth-of-type(2)"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, l=cells.length; i&lt;l; i++) &#123;</span><br><span class="line">    sum += <span class="built_in">parseFloat</span>(cells[i].firstChild.data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-14-在角度和弧度之间转换"><a href="#1-14-在角度和弧度之间转换" class="headerlink" title="1.14 在角度和弧度之间转换"></a>1.14 在角度和弧度之间转换</h4><ul><li>将角度转换为弧度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> radians = degrees * (<span class="built_in">Math</span>.PI / <span class="number">180</span>);</span><br></pre></td></tr></table></figure><ul><li>将弧度转化为角度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> degrees = radians * (<span class="number">180</span> / <span class="built_in">Math</span>.PI);</span><br></pre></td></tr></table></figure><h4 id="1-15-找到页面元素可容纳的一个圆的半径和圆心"><a href="#1-15-找到页面元素可容纳的一个圆的半径和圆心" class="headerlink" title="1.15 找到页面元素可容纳的一个圆的半径和圆心"></a>1.15 找到页面元素可容纳的一个圆的半径和圆心</h4><ul><li><a href="http://www.w3school.com.cn/jsref/jsref_min.asp" target="_blank" rel="noopener">Math.min(x,y)</a>方法可返回指定的数字中带有最低值的数字。</li><li>求出宽度和高度中较小的一个，用其除以2得到半径</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> circleRadius = <span class="built_in">Math</span>.min(elemengWidth, elemengHeight) / <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>给指定页面元素的宽度、高度，通过将二者都除以2来找到其中心点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = elemengWidth / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> y = elemengHeight / <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle" target="_blank" rel="noopener">Window.getComputedStyle()</a>方法给出应用活动样式表后的元素的所有CSS属性的值，并解析这些值可能包含的任何基本计算。</li><li><a href="http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/" target="_blank" rel="noopener">getComputedStyle()</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>将一个SVG圆放入到一个div元素中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">#elem &#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">height: 500px;</span></span><br><span class="line"><span class="undefined">border: 1px solid #ddd;</span></span><br><span class="line"><span class="undefined">background-color: #ddd;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"elem"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">id</span>=<span class="string">"circ"</span> <span class="attr">width</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"10"</span> <span class="attr">r</span>=<span class="string">"10"</span> <span class="attr">fill</span>=<span class="string">"#f90"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"elem"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> style = <span class="built_in">window</span>.getComputedStyle(box, <span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> width = <span class="built_in">parseInt</span>(style.getPropertyValue(<span class="string">"width"</span>));</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> height = <span class="built_in">parseInt</span>(style.getPropertyValue(<span class="string">"height"</span>));</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'w'</span>, width, <span class="string">'h'</span>, height);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> x = width / <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> y = height / <span class="number">2</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> circleRadius = <span class="built_in">Math</span>.min(width, height) / <span class="number">2</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> circ = <span class="built_in">document</span>.getElementById(<span class="string">"circ"</span>);</span></span><br><span class="line"><span class="javascript">circ.setAttribute(<span class="string">"r"</span>, circleRadius);</span></span><br><span class="line"><span class="javascript">circ.setAttribute(<span class="string">"cx"</span>, x);</span></span><br><span class="line"><span class="javascript">circ.setAttribute(<span class="string">"cy"</span>, y);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'r'</span>, circleRadius, <span class="string">' cx'</span>, x, <span class="string">' cy'</span>, y);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-16-计算圆弧的长度"><a href="#1-16-计算圆弧的长度" class="headerlink" title="1.16 计算圆弧的长度"></a>1.16 计算圆弧的长度</h4><ul><li>给定了一个圆的半径及圆弧角的角度值，求该圆弧的长度</li><li>使用<code>Math.PI</code>把角度转换为弧度，并在公式中使用该结果来求得圆弧的长度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> radians = degrees * (<span class="built_in">Math</span>.PI / <span class="number">180</span>);</span><br><span class="line"><span class="keyword">var</span> arclength = radians * radians;</span><br></pre></td></tr></table></figure><blockquote><p>待续~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript经典实例 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
